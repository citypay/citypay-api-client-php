<?php
/**
 * ApiSandboxIntegrationTest
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  CityPay
 * @author   CityPay Dev team
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

namespace CityPay;

use CityPay\Api\CardHolderAccountApi;
use CityPay\Api\OperationalApi;
use CityPay\Api\PaymentProcessingApi;
use CityPay\Model\AccountCreate;
use CityPay\Model\ApiKey;
use CityPay\Model\AuthRequest;
use CityPay\Model\CardHolderAccount;
use CityPay\Model\ChargeRequest;
use CityPay\Model\CResAuthRequest;
use CityPay\Model\Ping;
use CityPay\Model\RegisterCard;
use CityPay\Utils\Digest;
use PHPUnit\Framework\TestCase;
use GuzzleHttp;
use DateTime;
use \GuzzleHttp\Psr7\Request;
use \GuzzleHttp\Client;

class ApiSandboxIntegrationTest extends TestCase
{
    private static $config;
    private static $client_id;
    private static $merchant_id;
    private static $licence_key;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
        if (getenv("CP_MERCHANT_ID") && getenv("CP_LICENCE_KEY") && getenv("CP_CLIENT_ID")) {
            $merchantId = getenv("CP_MERCHANT_ID");
            $licenceKey = getenv("CP_LICENCE_KEY");
            $clientId = getenv("CP_CLIENT_ID");
            self::$client_id = $clientId;
            self::$merchant_id = $merchantId;
            self::$licence_key = $licenceKey;

            // long method
            // $apiKeyCredentials = new ApiKey($clientId, $licenceKey);
            // $apiKey = $apiKeyCredentials->generate();

            // static method
            $apiKey = ApiKey::newKey($clientId, $licenceKey);

            self::$config = Configuration::getDefaultConfiguration()->setApiKey('cp-api-key', $apiKey);
            self::$config = Configuration::getDefaultConfiguration()->setHost('https://sandbox.citypay.com/v6');

        } else {
            echo('Unable to obtain ENV variables to generate API Key!!');
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test Operational "Ping"
     */
    public function testPing(): void
    {
        $apiInstance = new OperationalApi(new GuzzleHttp\Client(), self::$config);

        $pingWithIdentifier = new Ping(array('identifier' => 'it_test'));
        $resultWithIdentifier = $apiInstance->pingRequest($pingWithIdentifier);
        self::assertEquals('044', $resultWithIdentifier['code']);
        self::assertNotNull($resultWithIdentifier['context']);
        self::assertEquals('it_test', $resultWithIdentifier['identifier']);
        self::assertEquals('Ping OK', $resultWithIdentifier['message']);

//        //test ping with no identifier - fix on API 6.0.10 release
//        $pingNoIdentifier = new Ping();
//        $resultNoIdentifier = $apiInstance->pingRequest($pingNoIdentifier);
//        self::assertEquals('044', $resultNoIdentifier['code']);
//        self::assertNotNull($resultNoIdentifier['context']);
//        self::assertEmpty( $resultNoIdentifier['identifier']);
//        self::assertEquals('Ping OK', $resultNoIdentifier['message']);
    }

    /**
     * Test Operational "ListMerchants"
     */
    public function testListMerchants(): void
    {
        $apiInstance = new OperationalApi(new GuzzleHttp\Client(), self::$config);
        $result = $apiInstance->listMerchantsRequest(self::$client_id);
        self::assertEquals('CityPay Test', $result['client_name']);
        self::assertEquals(self::$client_id, $result['clientid']);
        self::assertEquals('GBP', $result['merchants'][0]['currency']);
        self::assertEquals(41412435, $result['merchants'][0]['merchantid']);
        self::assertEquals('BOS FTPS Tests', $result['merchants'][0]['name']);
        self::assertEquals('T', $result['merchants'][0]['status']);
        self::assertEquals('Test', $result['merchants'][0]['status_label']);
        self::assertEquals('GBP', $result['merchants'][1]['currency']);
        self::assertEquals(self::$merchant_id, $result['merchants'][1]['merchantid']);
        self::assertEquals('CityPay Test Account', $result['merchants'][1]['name']);
        self::assertEquals('T', $result['merchants'][1]['status']);
        self::assertEquals('Test', $result['merchants'][1]['status_label']);
    }

    /**
     * Test Payment Processing "Authorise"
     */
    public function testAuthorise(): void
    {
        $apiInstance = new PaymentProcessingApi(new GuzzleHttp\Client(), self::$config);
        $id = uniqid();
        $data = array(
            'amount' => 1395,
            'cardnumber' => '4000 0000 0000 0002',
            'expmonth' => 12,
            'expyear' => 2030,
            'csc' => '012',
            'identifier' => $id,
            'merchantid' => self::$merchant_id,
            'threedsecure' => array("tds_policy" => "2")
        );

        $authRequest = new AuthRequest($data);
        $decision = $apiInstance->authorisationRequest($authRequest);
        self::assertEquals("001", $decision['auth_response']['result_code']);
        self::assertEquals($id, $decision['auth_response']['identifier']);
        self::assertEquals("A12345", $decision['auth_response']['authcode']);
        self::assertEquals(1395, $decision['auth_response']['amount']);
        self::assertEquals(True,  Digest::validateDigest($decision['auth_response'], self::$licence_key));
    }

    /**
     * Test Payment Processing "Authorise" 3DSv2
     */
    public function testAuthorise3DSv2(): void
    {
        $apiInstance = new PaymentProcessingApi(new GuzzleHttp\Client(), self::$config);
        $id = uniqid();
        $data = array(
            'amount' => 1396,
            'cardnumber' => '4000 0000 0000 0002',
            'expmonth' => 12,
            'expyear' => 2030,
            'csc' => '123',
            'identifier' => $id,
            'merchantid' => self::$merchant_id,
            'threedsecure' => array(
                "cp_bx" => "eyJhIjoiRkFwSCIsImMiOjI0LCJpIjoid3dIOTExTlBKSkdBRVhVZCIsImoiOmZhbHNlLCJsIjoiZW4tVVMiLCJoIjoxNDQwLCJ3IjoyNTYwLCJ0IjowLCJ1IjoiTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTFfMl8zKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5LjgyIFNhZmFyaS81MzcuMzYiLCJ2IjoiMS4wLjAifQ",
                "merchant_termurl" => "https://citypay.com/acs/return")
        );

        $authRequest = new AuthRequest($data);
        $decision = $apiInstance->authorisationRequest($authRequest);

        self::assertEmpty($decision['auth_response']);
        self::assertNotEmpty($decision['request_challenged']);
        self::assertEmpty($decision['authen_required']);

        $response = $decision['request_challenged'];
        self::assertNotEmpty($response['creq']);
        self::assertNotEmpty($response['acs_url']);
        self::assertNotEmpty($response['threedserver_trans_id']);

        $client = new Client();
        $headers['Content-Type'] = "application/json";
        $httpBodyString = (object) array("threeDSSessionData" => $response['three_d_server_trans_id'], "creq"=> $response['creq']);
        $httpBodyJson = json_encode($httpBodyString);

        $request = new Request(
            'POST',
            "https://sandbox.citypay.com/3dsv2/acs",
            $headers,
            $httpBodyJson
        );

        $res = $client->send($request);


        $content = json_decode((string) $res->getBody(), true);

        self::assertNotEmpty($content['acsTransID']);
        self::assertNotEmpty($content['messageType']);
        self::assertNotEmpty($content['messageVersion']);
        self::assertNotEmpty($content['threeDSServerTransID']);
        self::assertNotEmpty($content['transStatus']);

        $cResAuthRequest = new CResAuthRequest(array("cres" => base64_encode($res->getBody())));
        $cResRequestResponse = $apiInstance->cResRequestWithHttpInfo($cResAuthRequest);
        self::assertEquals(1396, $cResRequestResponse[0]['amount']);
        self::assertEquals("A12345", $cResRequestResponse[0]['authcode']);
        self::assertEquals("Y", $cResRequestResponse[0]['authen_result']);
        self::assertEquals(1, $cResRequestResponse[0]['authorised']);
    }

    /**
     * Test Cardholder Accounts
     */
    public function testCardholderAccounts(): void
    {
        $cha_id = uniqid();
        $apiInstance = new CardHolderAccountApi(new GuzzleHttp\Client(), self::$config);
        $account = array(
            'account_id' => $cha_id,
            'contact' => array(
                'address1' => "7 Esplanade",
                'area' => "St Helier",
                'company' => "CityPay Limited",
                'country' => "JE",
                'email' => "dev@citypay.com",
                'firstname' => "Integration",
                'lastname' => "Test",
                'postcode' => "JE2 3QA",
            )
        );
        $account_create = new AccountCreate($account);
        $create_result = $apiInstance->accountCreate($account_create);
        self::assertEquals($cha_id, $create_result['account_id']);
        self::assertEquals('7 Esplanade', $create_result['contact']['address1']);

        $card = [
            'cardnumber' => "4000 0000 0000 0002",
            'expmonth' => 12,
            'expyear' => 2030,
        ];
        $new_card = new RegisterCard($card);
        $register_card = $apiInstance->accountCardRegisterRequest($cha_id, $new_card);
        self::assertEquals($cha_id, $register_card['account_id']);
        self::assertNotEmpty($register_card['cards']);
        self::assertEquals(12, $register_card['cards'][0]['expmonth']);
        self::assertEquals(2030, $register_card['cards'][0]['expyear']);

        $retrieve = $apiInstance->accountRetrieveRequest($cha_id);
        self::assertEquals($cha_id, $retrieve['account_id']);
        self::assertEquals("7 Esplanade", $retrieve['contact']['address1']);
        self::assertNotEmpty($retrieve['cards']);
        self::assertEquals(12, $retrieve['cards'][0]['expmonth']);
        self::assertEquals(2030, $retrieve['cards'][0]['expyear']);

        $identifier = uniqid();
        $req_data = [
            'amount' => 7801,
            'identifier' => $identifier,
            'merchantid' => self::$merchant_id,
            'token' => $retrieve['cards'][0]['token'],
            'csc' => "012",
            'threedsecure' => array("tds_policy" => "2")
        ];
        $charge_req = new ChargeRequest($req_data);
        $charge_cha = $apiInstance->chargeRequest($charge_req);

        self::assertEquals("001", $charge_cha['auth_response']['result_code']);
        self::assertEquals($identifier, $charge_cha['auth_response']['identifier']);
        self::assertEquals("A12345", $charge_cha['auth_response']['authcode']);
        self::assertEquals(7801, $charge_cha['auth_response']['amount']);

        $deleteAccount = $apiInstance->accountDeleteRequest($cha_id);
        self::assertEquals("001", $deleteAccount['code']);


    }
}
