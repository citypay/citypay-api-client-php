<?php
/**
 * ListMerchantsResponseTest
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace CityPay;

use PHPUnit\Framework\TestCase;

/**
 * ListMerchantsResponseTest Class Doc Comment
 *
 * @category    Class
 * @description ListMerchantsResponse
 * @package     CityPay
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ListMerchantsResponseTest extends TestCase
{
    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $data = (object)array (
            'client_name' => 'CityPay Demo',
            'clientid' => 'PC123456',
            'merchants' =>
                (object)array (
                    0 =>
                        (object)array (
                            'currency' => 'GBP',
                            'merchantid' => 12345678,
                            'name' => 'CityPay One',
                            'status' => 'T',
                            'status_label' => 'Test',
                        ),
                    1 =>
                        (object)array (
                            'currency' => 'GBP',
                            'merchantid' => 87654321,
                            'name' => 'CityPay Two',
                            'status' => 'T',
                            'status_label' => 'Test',
                        ),
                ),
        );

        $this->instance = ObjectSerializer::deserialize($data, '\CityPay\Model\ListMerchantsResponse');

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Test "ListMerchantsResponse"
     */
    public function testListMerchantsResponse()
    {
        self::assertEquals('CityPay Demo', $this->instance['client_name']);
        self::assertEquals('PC123456', $this->instance['clientid']);
        self::assertEquals('GBP', $this->instance['merchants'][0]['currency']);
        self::assertEquals(12345678, $this->instance['merchants'][0]['merchantid']);
        self::assertEquals('CityPay One', $this->instance['merchants'][0]['name']);
        self::assertEquals('T', $this->instance['merchants'][0]['status']);
        self::assertEquals('Test', $this->instance['merchants'][0]['status_label']);
        self::assertEquals('GBP', $this->instance['merchants'][1]['currency']);
        self::assertEquals(87654321, $this->instance['merchants'][1]['merchantid']);
        self::assertEquals('CityPay Two', $this->instance['merchants'][1]['name']);
        self::assertEquals('T', $this->instance['merchants'][1]['status']);
        self::assertEquals('Test', $this->instance['merchants'][1]['status_label']);
    }

    /**
     * Test attribute "client_name"
     */
    public function testPropertyClientName()
    {
    }

    /**
     * Test attribute "clientid"
     */
    public function testPropertyClientid()
    {
    }

    /**
     * Test attribute "merchants"
     */
    public function testPropertyMerchants()
    {
    }
}
