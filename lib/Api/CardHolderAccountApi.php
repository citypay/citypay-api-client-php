<?php
/**
 * CardHolderAccountApi
 * PHP version 7.4
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CityPay\ApiException;
use CityPay\Configuration;
use CityPay\HeaderSelector;
use CityPay\ObjectSerializer;

/**
 * CardHolderAccountApi Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CardHolderAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountCardDeleteRequest' => [
            'application/json',
        ],
        'accountCardRegisterRequest' => [
            'application/json',
            'text/xml',
        ],
        'accountCardStatusRequest' => [
            'application/json',
            'text/xml',
        ],
        'accountChangeContactRequest' => [
            'application/json',
            'text/xml',
        ],
        'accountCreate' => [
            'application/json',
            'text/xml',
        ],
        'accountDeleteRequest' => [
            'application/json',
        ],
        'accountExistsRequest' => [
            'application/json',
        ],
        'accountRetrieveRequest' => [
            'application/json',
        ],
        'accountStatusRequest' => [
            'application/json',
            'text/xml',
        ],
        'chargeRequest' => [
            'application/json',
            'text/xml',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountCardDeleteRequest
     *
     * Card Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardDeleteRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Acknowledgement|\CityPay\Model\Error
     */
    public function accountCardDeleteRequest($accountid, $card_id, string $contentType = self::contentTypes['accountCardDeleteRequest'][0])
    {
        list($response) = $this->accountCardDeleteRequestWithHttpInfo($accountid, $card_id, $contentType);
        return $response;
    }

    /**
     * Operation accountCardDeleteRequestWithHttpInfo
     *
     * Card Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardDeleteRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Acknowledgement|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCardDeleteRequestWithHttpInfo($accountid, $card_id, string $contentType = self::contentTypes['accountCardDeleteRequest'][0])
    {
        $request = $this->accountCardDeleteRequestRequest($accountid, $card_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Acknowledgement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Acknowledgement' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Acknowledgement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Acknowledgement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Acknowledgement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCardDeleteRequestAsync
     *
     * Card Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardDeleteRequestAsync($accountid, $card_id, string $contentType = self::contentTypes['accountCardDeleteRequest'][0])
    {
        return $this->accountCardDeleteRequestAsyncWithHttpInfo($accountid, $card_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCardDeleteRequestAsyncWithHttpInfo
     *
     * Card Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardDeleteRequestAsyncWithHttpInfo($accountid, $card_id, string $contentType = self::contentTypes['accountCardDeleteRequest'][0])
    {
        $returnType = '\CityPay\Model\Acknowledgement';
        $request = $this->accountCardDeleteRequestRequest($accountid, $card_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCardDeleteRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCardDeleteRequestRequest($accountid, $card_id, string $contentType = self::contentTypes['accountCardDeleteRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountCardDeleteRequest'
            );
        }

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling accountCardDeleteRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}/card/{cardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }
        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountCardRegisterRequest
     *
     * Card Registration
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\RegisterCard $register_card register_card (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardRegisterRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\CardHolderAccount|\CityPay\Model\Error
     */
    public function accountCardRegisterRequest($accountid, $register_card, string $contentType = self::contentTypes['accountCardRegisterRequest'][0])
    {
        list($response) = $this->accountCardRegisterRequestWithHttpInfo($accountid, $register_card, $contentType);
        return $response;
    }

    /**
     * Operation accountCardRegisterRequestWithHttpInfo
     *
     * Card Registration
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\RegisterCard $register_card (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardRegisterRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\CardHolderAccount|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCardRegisterRequestWithHttpInfo($accountid, $register_card, string $contentType = self::contentTypes['accountCardRegisterRequest'][0])
    {
        $request = $this->accountCardRegisterRequestRequest($accountid, $register_card, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\CardHolderAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\CardHolderAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\CardHolderAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\CardHolderAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\CardHolderAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCardRegisterRequestAsync
     *
     * Card Registration
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\RegisterCard $register_card (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardRegisterRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardRegisterRequestAsync($accountid, $register_card, string $contentType = self::contentTypes['accountCardRegisterRequest'][0])
    {
        return $this->accountCardRegisterRequestAsyncWithHttpInfo($accountid, $register_card, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCardRegisterRequestAsyncWithHttpInfo
     *
     * Card Registration
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\RegisterCard $register_card (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardRegisterRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardRegisterRequestAsyncWithHttpInfo($accountid, $register_card, string $contentType = self::contentTypes['accountCardRegisterRequest'][0])
    {
        $returnType = '\CityPay\Model\CardHolderAccount';
        $request = $this->accountCardRegisterRequestRequest($accountid, $register_card, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCardRegisterRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\RegisterCard $register_card (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardRegisterRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCardRegisterRequestRequest($accountid, $register_card, string $contentType = self::contentTypes['accountCardRegisterRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountCardRegisterRequest'
            );
        }

        // verify the required parameter 'register_card' is set
        if ($register_card === null || (is_array($register_card) && count($register_card) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_card when calling accountCardRegisterRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($register_card)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($register_card));
            } else {
                $httpBody = $register_card;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountCardStatusRequest
     *
     * Card Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  \CityPay\Model\CardStatus $card_status card_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardStatusRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Acknowledgement|\CityPay\Model\Error
     */
    public function accountCardStatusRequest($accountid, $card_id, $card_status, string $contentType = self::contentTypes['accountCardStatusRequest'][0])
    {
        list($response) = $this->accountCardStatusRequestWithHttpInfo($accountid, $card_id, $card_status, $contentType);
        return $response;
    }

    /**
     * Operation accountCardStatusRequestWithHttpInfo
     *
     * Card Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  \CityPay\Model\CardStatus $card_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardStatusRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Acknowledgement|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCardStatusRequestWithHttpInfo($accountid, $card_id, $card_status, string $contentType = self::contentTypes['accountCardStatusRequest'][0])
    {
        $request = $this->accountCardStatusRequestRequest($accountid, $card_id, $card_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Acknowledgement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Acknowledgement' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Acknowledgement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Acknowledgement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Acknowledgement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCardStatusRequestAsync
     *
     * Card Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  \CityPay\Model\CardStatus $card_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardStatusRequestAsync($accountid, $card_id, $card_status, string $contentType = self::contentTypes['accountCardStatusRequest'][0])
    {
        return $this->accountCardStatusRequestAsyncWithHttpInfo($accountid, $card_id, $card_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCardStatusRequestAsyncWithHttpInfo
     *
     * Card Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  \CityPay\Model\CardStatus $card_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCardStatusRequestAsyncWithHttpInfo($accountid, $card_id, $card_status, string $contentType = self::contentTypes['accountCardStatusRequest'][0])
    {
        $returnType = '\CityPay\Model\Acknowledgement';
        $request = $this->accountCardStatusRequestRequest($accountid, $card_id, $card_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCardStatusRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $card_id The id of the card that is presented by a call to retrieve a card holder account. (required)
     * @param  \CityPay\Model\CardStatus $card_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCardStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCardStatusRequestRequest($accountid, $card_id, $card_status, string $contentType = self::contentTypes['accountCardStatusRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountCardStatusRequest'
            );
        }

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling accountCardStatusRequest'
            );
        }

        // verify the required parameter 'card_status' is set
        if ($card_status === null || (is_array($card_status) && count($card_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_status when calling accountCardStatusRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}/card/{cardId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }
        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($card_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($card_status));
            } else {
                $httpBody = $card_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountChangeContactRequest
     *
     * Contact Details Update
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\ContactDetails $contact_details contact_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountChangeContactRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\CardHolderAccount|\CityPay\Model\Error
     */
    public function accountChangeContactRequest($accountid, $contact_details, string $contentType = self::contentTypes['accountChangeContactRequest'][0])
    {
        list($response) = $this->accountChangeContactRequestWithHttpInfo($accountid, $contact_details, $contentType);
        return $response;
    }

    /**
     * Operation accountChangeContactRequestWithHttpInfo
     *
     * Contact Details Update
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\ContactDetails $contact_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountChangeContactRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\CardHolderAccount|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountChangeContactRequestWithHttpInfo($accountid, $contact_details, string $contentType = self::contentTypes['accountChangeContactRequest'][0])
    {
        $request = $this->accountChangeContactRequestRequest($accountid, $contact_details, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\CardHolderAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\CardHolderAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\CardHolderAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\CardHolderAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\CardHolderAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountChangeContactRequestAsync
     *
     * Contact Details Update
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\ContactDetails $contact_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountChangeContactRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountChangeContactRequestAsync($accountid, $contact_details, string $contentType = self::contentTypes['accountChangeContactRequest'][0])
    {
        return $this->accountChangeContactRequestAsyncWithHttpInfo($accountid, $contact_details, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountChangeContactRequestAsyncWithHttpInfo
     *
     * Contact Details Update
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\ContactDetails $contact_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountChangeContactRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountChangeContactRequestAsyncWithHttpInfo($accountid, $contact_details, string $contentType = self::contentTypes['accountChangeContactRequest'][0])
    {
        $returnType = '\CityPay\Model\CardHolderAccount';
        $request = $this->accountChangeContactRequestRequest($accountid, $contact_details, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountChangeContactRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\ContactDetails $contact_details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountChangeContactRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountChangeContactRequestRequest($accountid, $contact_details, string $contentType = self::contentTypes['accountChangeContactRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountChangeContactRequest'
            );
        }

        // verify the required parameter 'contact_details' is set
        if ($contact_details === null || (is_array($contact_details) && count($contact_details) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_details when calling accountChangeContactRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contact_details)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contact_details));
            } else {
                $httpBody = $contact_details;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountCreate
     *
     * Account Create
     *
     * @param  \CityPay\Model\AccountCreate $account_create account_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCreate'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\CardHolderAccount|\CityPay\Model\Error
     */
    public function accountCreate($account_create, string $contentType = self::contentTypes['accountCreate'][0])
    {
        list($response) = $this->accountCreateWithHttpInfo($account_create, $contentType);
        return $response;
    }

    /**
     * Operation accountCreateWithHttpInfo
     *
     * Account Create
     *
     * @param  \CityPay\Model\AccountCreate $account_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCreate'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\CardHolderAccount|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCreateWithHttpInfo($account_create, string $contentType = self::contentTypes['accountCreate'][0])
    {
        $request = $this->accountCreateRequest($account_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\CardHolderAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\CardHolderAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\CardHolderAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\CardHolderAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\CardHolderAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCreateAsync
     *
     * Account Create
     *
     * @param  \CityPay\Model\AccountCreate $account_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCreateAsync($account_create, string $contentType = self::contentTypes['accountCreate'][0])
    {
        return $this->accountCreateAsyncWithHttpInfo($account_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCreateAsyncWithHttpInfo
     *
     * Account Create
     *
     * @param  \CityPay\Model\AccountCreate $account_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCreateAsyncWithHttpInfo($account_create, string $contentType = self::contentTypes['accountCreate'][0])
    {
        $returnType = '\CityPay\Model\CardHolderAccount';
        $request = $this->accountCreateRequest($account_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCreate'
     *
     * @param  \CityPay\Model\AccountCreate $account_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCreateRequest($account_create, string $contentType = self::contentTypes['accountCreate'][0])
    {

        // verify the required parameter 'account_create' is set
        if ($account_create === null || (is_array($account_create) && count($account_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_create when calling accountCreate'
            );
        }


        $resourcePath = '/v6/account/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_create));
            } else {
                $httpBody = $account_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountDeleteRequest
     *
     * Account Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Acknowledgement|\CityPay\Model\Error
     */
    public function accountDeleteRequest($accountid, string $contentType = self::contentTypes['accountDeleteRequest'][0])
    {
        list($response) = $this->accountDeleteRequestWithHttpInfo($accountid, $contentType);
        return $response;
    }

    /**
     * Operation accountDeleteRequestWithHttpInfo
     *
     * Account Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Acknowledgement|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDeleteRequestWithHttpInfo($accountid, string $contentType = self::contentTypes['accountDeleteRequest'][0])
    {
        $request = $this->accountDeleteRequestRequest($accountid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Acknowledgement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Acknowledgement' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Acknowledgement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Acknowledgement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Acknowledgement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDeleteRequestAsync
     *
     * Account Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteRequestAsync($accountid, string $contentType = self::contentTypes['accountDeleteRequest'][0])
    {
        return $this->accountDeleteRequestAsyncWithHttpInfo($accountid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDeleteRequestAsyncWithHttpInfo
     *
     * Account Deletion
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteRequestAsyncWithHttpInfo($accountid, string $contentType = self::contentTypes['accountDeleteRequest'][0])
    {
        $returnType = '\CityPay\Model\Acknowledgement';
        $request = $this->accountDeleteRequestRequest($accountid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDeleteRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDeleteRequestRequest($accountid, string $contentType = self::contentTypes['accountDeleteRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountDeleteRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountExistsRequest
     *
     * Account Exists
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountExistsRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Exists|\CityPay\Model\Error
     */
    public function accountExistsRequest($accountid, string $contentType = self::contentTypes['accountExistsRequest'][0])
    {
        list($response) = $this->accountExistsRequestWithHttpInfo($accountid, $contentType);
        return $response;
    }

    /**
     * Operation accountExistsRequestWithHttpInfo
     *
     * Account Exists
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountExistsRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Exists|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountExistsRequestWithHttpInfo($accountid, string $contentType = self::contentTypes['accountExistsRequest'][0])
    {
        $request = $this->accountExistsRequestRequest($accountid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Exists' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Exists' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Exists', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Exists';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Exists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountExistsRequestAsync
     *
     * Account Exists
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountExistsRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountExistsRequestAsync($accountid, string $contentType = self::contentTypes['accountExistsRequest'][0])
    {
        return $this->accountExistsRequestAsyncWithHttpInfo($accountid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountExistsRequestAsyncWithHttpInfo
     *
     * Account Exists
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountExistsRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountExistsRequestAsyncWithHttpInfo($accountid, string $contentType = self::contentTypes['accountExistsRequest'][0])
    {
        $returnType = '\CityPay\Model\Exists';
        $request = $this->accountExistsRequestRequest($accountid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountExistsRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountExistsRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountExistsRequestRequest($accountid, string $contentType = self::contentTypes['accountExistsRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountExistsRequest'
            );
        }


        $resourcePath = '/v6/account-exists/{accountid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountRetrieveRequest
     *
     * Account Retrieval
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRetrieveRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\CardHolderAccount|\CityPay\Model\Error
     */
    public function accountRetrieveRequest($accountid, string $contentType = self::contentTypes['accountRetrieveRequest'][0])
    {
        list($response) = $this->accountRetrieveRequestWithHttpInfo($accountid, $contentType);
        return $response;
    }

    /**
     * Operation accountRetrieveRequestWithHttpInfo
     *
     * Account Retrieval
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRetrieveRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\CardHolderAccount|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountRetrieveRequestWithHttpInfo($accountid, string $contentType = self::contentTypes['accountRetrieveRequest'][0])
    {
        $request = $this->accountRetrieveRequestRequest($accountid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\CardHolderAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\CardHolderAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\CardHolderAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\CardHolderAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\CardHolderAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountRetrieveRequestAsync
     *
     * Account Retrieval
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRetrieveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRetrieveRequestAsync($accountid, string $contentType = self::contentTypes['accountRetrieveRequest'][0])
    {
        return $this->accountRetrieveRequestAsyncWithHttpInfo($accountid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountRetrieveRequestAsyncWithHttpInfo
     *
     * Account Retrieval
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRetrieveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRetrieveRequestAsyncWithHttpInfo($accountid, string $contentType = self::contentTypes['accountRetrieveRequest'][0])
    {
        $returnType = '\CityPay\Model\CardHolderAccount';
        $request = $this->accountRetrieveRequestRequest($accountid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountRetrieveRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRetrieveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountRetrieveRequestRequest($accountid, string $contentType = self::contentTypes['accountRetrieveRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountRetrieveRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountStatusRequest
     *
     * Account Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\AccountStatus $account_status account_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountStatusRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Acknowledgement|\CityPay\Model\Error
     */
    public function accountStatusRequest($accountid, $account_status, string $contentType = self::contentTypes['accountStatusRequest'][0])
    {
        list($response) = $this->accountStatusRequestWithHttpInfo($accountid, $account_status, $contentType);
        return $response;
    }

    /**
     * Operation accountStatusRequestWithHttpInfo
     *
     * Account Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\AccountStatus $account_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountStatusRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Acknowledgement|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountStatusRequestWithHttpInfo($accountid, $account_status, string $contentType = self::contentTypes['accountStatusRequest'][0])
    {
        $request = $this->accountStatusRequestRequest($accountid, $account_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Acknowledgement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Acknowledgement' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Acknowledgement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Acknowledgement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Acknowledgement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountStatusRequestAsync
     *
     * Account Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\AccountStatus $account_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountStatusRequestAsync($accountid, $account_status, string $contentType = self::contentTypes['accountStatusRequest'][0])
    {
        return $this->accountStatusRequestAsyncWithHttpInfo($accountid, $account_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountStatusRequestAsyncWithHttpInfo
     *
     * Account Status
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\AccountStatus $account_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountStatusRequestAsyncWithHttpInfo($accountid, $account_status, string $contentType = self::contentTypes['accountStatusRequest'][0])
    {
        $returnType = '\CityPay\Model\Acknowledgement';
        $request = $this->accountStatusRequestRequest($accountid, $account_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountStatusRequest'
     *
     * @param  string $accountid The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account. (required)
     * @param  \CityPay\Model\AccountStatus $account_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountStatusRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountStatusRequestRequest($accountid, $account_status, string $contentType = self::contentTypes['accountStatusRequest'][0])
    {

        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling accountStatusRequest'
            );
        }

        // verify the required parameter 'account_status' is set
        if ($account_status === null || (is_array($account_status) && count($account_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_status when calling accountStatusRequest'
            );
        }


        $resourcePath = '/v6/account/{accountid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_status));
            } else {
                $httpBody = $account_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chargeRequest
     *
     * Charge
     *
     * @param  \CityPay\Model\ChargeRequest $charge_request charge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chargeRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\Decision|\CityPay\Model\Error
     */
    public function chargeRequest($charge_request, string $contentType = self::contentTypes['chargeRequest'][0])
    {
        list($response) = $this->chargeRequestWithHttpInfo($charge_request, $contentType);
        return $response;
    }

    /**
     * Operation chargeRequestWithHttpInfo
     *
     * Charge
     *
     * @param  \CityPay\Model\ChargeRequest $charge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chargeRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\Decision|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargeRequestWithHttpInfo($charge_request, string $contentType = self::contentTypes['chargeRequest'][0])
    {
        $request = $this->chargeRequestRequest($charge_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\Decision' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Decision' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Decision', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\Decision';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Decision',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargeRequestAsync
     *
     * Charge
     *
     * @param  \CityPay\Model\ChargeRequest $charge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chargeRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargeRequestAsync($charge_request, string $contentType = self::contentTypes['chargeRequest'][0])
    {
        return $this->chargeRequestAsyncWithHttpInfo($charge_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargeRequestAsyncWithHttpInfo
     *
     * Charge
     *
     * @param  \CityPay\Model\ChargeRequest $charge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chargeRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargeRequestAsyncWithHttpInfo($charge_request, string $contentType = self::contentTypes['chargeRequest'][0])
    {
        $returnType = '\CityPay\Model\Decision';
        $request = $this->chargeRequestRequest($charge_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargeRequest'
     *
     * @param  \CityPay\Model\ChargeRequest $charge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chargeRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chargeRequestRequest($charge_request, string $contentType = self::contentTypes['chargeRequest'][0])
    {

        // verify the required parameter 'charge_request' is set
        if ($charge_request === null || (is_array($charge_request) && count($charge_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $charge_request when calling chargeRequest'
            );
        }


        $resourcePath = '/v6/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($charge_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($charge_request));
            } else {
                $httpBody = $charge_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
