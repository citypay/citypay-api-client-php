<?php
/**
 * ReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CityPay\ApiException;
use CityPay\Configuration;
use CityPay\HeaderSelector;
use CityPay\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'batchedTransactionReportRequest' => [
            'application/json',
            'text/xml',
        ],
        'merchantBatchReportRequest' => [
            'application/json',
            'text/xml',
        ],
        'merchantBatchRequest' => [
            'application/json',
        ],
        'remittanceRangeReport' => [
            'application/json',
            'text/xml',
        ],
        'remittanceReportRequest' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchedTransactionReportRequest
     *
     * Batch Transaction Report Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  \CityPay\Model\BatchTransactionReportRequest $batch_transaction_report_request batch_transaction_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchedTransactionReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\BatchTransactionReportResponse|\CityPay\Model\Error
     */
    public function batchedTransactionReportRequest($merchantid, $batch_no, $batch_transaction_report_request, string $contentType = self::contentTypes['batchedTransactionReportRequest'][0])
    {
        list($response) = $this->batchedTransactionReportRequestWithHttpInfo($merchantid, $batch_no, $batch_transaction_report_request, $contentType);
        return $response;
    }

    /**
     * Operation batchedTransactionReportRequestWithHttpInfo
     *
     * Batch Transaction Report Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  \CityPay\Model\BatchTransactionReportRequest $batch_transaction_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchedTransactionReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\BatchTransactionReportResponse|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchedTransactionReportRequestWithHttpInfo($merchantid, $batch_no, $batch_transaction_report_request, string $contentType = self::contentTypes['batchedTransactionReportRequest'][0])
    {
        $request = $this->batchedTransactionReportRequestRequest($merchantid, $batch_no, $batch_transaction_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\BatchTransactionReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\BatchTransactionReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\BatchTransactionReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\BatchTransactionReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\BatchTransactionReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchedTransactionReportRequestAsync
     *
     * Batch Transaction Report Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  \CityPay\Model\BatchTransactionReportRequest $batch_transaction_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchedTransactionReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchedTransactionReportRequestAsync($merchantid, $batch_no, $batch_transaction_report_request, string $contentType = self::contentTypes['batchedTransactionReportRequest'][0])
    {
        return $this->batchedTransactionReportRequestAsyncWithHttpInfo($merchantid, $batch_no, $batch_transaction_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchedTransactionReportRequestAsyncWithHttpInfo
     *
     * Batch Transaction Report Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  \CityPay\Model\BatchTransactionReportRequest $batch_transaction_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchedTransactionReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchedTransactionReportRequestAsyncWithHttpInfo($merchantid, $batch_no, $batch_transaction_report_request, string $contentType = self::contentTypes['batchedTransactionReportRequest'][0])
    {
        $returnType = '\CityPay\Model\BatchTransactionReportResponse';
        $request = $this->batchedTransactionReportRequestRequest($merchantid, $batch_no, $batch_transaction_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchedTransactionReportRequest'
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  \CityPay\Model\BatchTransactionReportRequest $batch_transaction_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchedTransactionReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchedTransactionReportRequestRequest($merchantid, $batch_no, $batch_transaction_report_request, string $contentType = self::contentTypes['batchedTransactionReportRequest'][0])
    {

        // verify the required parameter 'merchantid' is set
        if ($merchantid === null || (is_array($merchantid) && count($merchantid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantid when calling batchedTransactionReportRequest'
            );
        }

        // verify the required parameter 'batch_no' is set
        if ($batch_no === null || (is_array($batch_no) && count($batch_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_no when calling batchedTransactionReportRequest'
            );
        }

        // verify the required parameter 'batch_transaction_report_request' is set
        if ($batch_transaction_report_request === null || (is_array($batch_transaction_report_request) && count($batch_transaction_report_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_transaction_report_request when calling batchedTransactionReportRequest'
            );
        }


        $resourcePath = '/v6/merchant-batch/{merchantid}/{batch_no}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantid !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantid' . '}',
                ObjectSerializer::toPathValue($merchantid),
                $resourcePath
            );
        }
        // path params
        if ($batch_no !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_no' . '}',
                ObjectSerializer::toPathValue($batch_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($batch_transaction_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($batch_transaction_report_request));
            } else {
                $httpBody = $batch_transaction_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation merchantBatchReportRequest
     *
     * Merchant Batch Report Request
     *
     * @param  \CityPay\Model\MerchantBatchReportRequest $merchant_batch_report_request merchant_batch_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\MerchantBatchReportResponse|\CityPay\Model\Error
     */
    public function merchantBatchReportRequest($merchant_batch_report_request, string $contentType = self::contentTypes['merchantBatchReportRequest'][0])
    {
        list($response) = $this->merchantBatchReportRequestWithHttpInfo($merchant_batch_report_request, $contentType);
        return $response;
    }

    /**
     * Operation merchantBatchReportRequestWithHttpInfo
     *
     * Merchant Batch Report Request
     *
     * @param  \CityPay\Model\MerchantBatchReportRequest $merchant_batch_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\MerchantBatchReportResponse|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function merchantBatchReportRequestWithHttpInfo($merchant_batch_report_request, string $contentType = self::contentTypes['merchantBatchReportRequest'][0])
    {
        $request = $this->merchantBatchReportRequestRequest($merchant_batch_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\MerchantBatchReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\MerchantBatchReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\MerchantBatchReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\MerchantBatchReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\MerchantBatchReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation merchantBatchReportRequestAsync
     *
     * Merchant Batch Report Request
     *
     * @param  \CityPay\Model\MerchantBatchReportRequest $merchant_batch_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantBatchReportRequestAsync($merchant_batch_report_request, string $contentType = self::contentTypes['merchantBatchReportRequest'][0])
    {
        return $this->merchantBatchReportRequestAsyncWithHttpInfo($merchant_batch_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation merchantBatchReportRequestAsyncWithHttpInfo
     *
     * Merchant Batch Report Request
     *
     * @param  \CityPay\Model\MerchantBatchReportRequest $merchant_batch_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantBatchReportRequestAsyncWithHttpInfo($merchant_batch_report_request, string $contentType = self::contentTypes['merchantBatchReportRequest'][0])
    {
        $returnType = '\CityPay\Model\MerchantBatchReportResponse';
        $request = $this->merchantBatchReportRequestRequest($merchant_batch_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'merchantBatchReportRequest'
     *
     * @param  \CityPay\Model\MerchantBatchReportRequest $merchant_batch_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function merchantBatchReportRequestRequest($merchant_batch_report_request, string $contentType = self::contentTypes['merchantBatchReportRequest'][0])
    {

        // verify the required parameter 'merchant_batch_report_request' is set
        if ($merchant_batch_report_request === null || (is_array($merchant_batch_report_request) && count($merchant_batch_report_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_batch_report_request when calling merchantBatchReportRequest'
            );
        }


        $resourcePath = '/v6/merchant-batch/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchant_batch_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchant_batch_report_request));
            } else {
                $httpBody = $merchant_batch_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation merchantBatchRequest
     *
     * Merchant Batch Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\MerchantBatchResponse|\CityPay\Model\Error
     */
    public function merchantBatchRequest($merchantid, $batch_no, string $contentType = self::contentTypes['merchantBatchRequest'][0])
    {
        list($response) = $this->merchantBatchRequestWithHttpInfo($merchantid, $batch_no, $contentType);
        return $response;
    }

    /**
     * Operation merchantBatchRequestWithHttpInfo
     *
     * Merchant Batch Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\MerchantBatchResponse|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function merchantBatchRequestWithHttpInfo($merchantid, $batch_no, string $contentType = self::contentTypes['merchantBatchRequest'][0])
    {
        $request = $this->merchantBatchRequestRequest($merchantid, $batch_no, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\MerchantBatchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\MerchantBatchResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\MerchantBatchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\MerchantBatchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\MerchantBatchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation merchantBatchRequestAsync
     *
     * Merchant Batch Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantBatchRequestAsync($merchantid, $batch_no, string $contentType = self::contentTypes['merchantBatchRequest'][0])
    {
        return $this->merchantBatchRequestAsyncWithHttpInfo($merchantid, $batch_no, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation merchantBatchRequestAsyncWithHttpInfo
     *
     * Merchant Batch Request
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantBatchRequestAsyncWithHttpInfo($merchantid, $batch_no, string $contentType = self::contentTypes['merchantBatchRequest'][0])
    {
        $returnType = '\CityPay\Model\MerchantBatchResponse';
        $request = $this->merchantBatchRequestRequest($merchantid, $batch_no, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'merchantBatchRequest'
     *
     * @param  int $merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param  string $batch_no The batch number that is being requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['merchantBatchRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function merchantBatchRequestRequest($merchantid, $batch_no, string $contentType = self::contentTypes['merchantBatchRequest'][0])
    {

        // verify the required parameter 'merchantid' is set
        if ($merchantid === null || (is_array($merchantid) && count($merchantid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantid when calling merchantBatchRequest'
            );
        }

        // verify the required parameter 'batch_no' is set
        if ($batch_no === null || (is_array($batch_no) && count($batch_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_no when calling merchantBatchRequest'
            );
        }


        $resourcePath = '/v6/merchant-batch/{merchantid}/{batch_no}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantid !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantid' . '}',
                ObjectSerializer::toPathValue($merchantid),
                $resourcePath
            );
        }
        // path params
        if ($batch_no !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_no' . '}',
                ObjectSerializer::toPathValue($batch_no),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remittanceRangeReport
     *
     * Remittance Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  \CityPay\Model\RemittanceReportRequest $remittance_report_request remittance_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceRangeReport'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\RemittanceReportResponse|\CityPay\Model\Error
     */
    public function remittanceRangeReport($clientid, $remittance_report_request, string $contentType = self::contentTypes['remittanceRangeReport'][0])
    {
        list($response) = $this->remittanceRangeReportWithHttpInfo($clientid, $remittance_report_request, $contentType);
        return $response;
    }

    /**
     * Operation remittanceRangeReportWithHttpInfo
     *
     * Remittance Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  \CityPay\Model\RemittanceReportRequest $remittance_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceRangeReport'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\RemittanceReportResponse|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function remittanceRangeReportWithHttpInfo($clientid, $remittance_report_request, string $contentType = self::contentTypes['remittanceRangeReport'][0])
    {
        $request = $this->remittanceRangeReportRequest($clientid, $remittance_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\RemittanceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\RemittanceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\RemittanceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\RemittanceReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\RemittanceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remittanceRangeReportAsync
     *
     * Remittance Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  \CityPay\Model\RemittanceReportRequest $remittance_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceRangeReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remittanceRangeReportAsync($clientid, $remittance_report_request, string $contentType = self::contentTypes['remittanceRangeReport'][0])
    {
        return $this->remittanceRangeReportAsyncWithHttpInfo($clientid, $remittance_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remittanceRangeReportAsyncWithHttpInfo
     *
     * Remittance Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  \CityPay\Model\RemittanceReportRequest $remittance_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceRangeReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remittanceRangeReportAsyncWithHttpInfo($clientid, $remittance_report_request, string $contentType = self::contentTypes['remittanceRangeReport'][0])
    {
        $returnType = '\CityPay\Model\RemittanceReportResponse';
        $request = $this->remittanceRangeReportRequest($clientid, $remittance_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remittanceRangeReport'
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  \CityPay\Model\RemittanceReportRequest $remittance_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceRangeReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remittanceRangeReportRequest($clientid, $remittance_report_request, string $contentType = self::contentTypes['remittanceRangeReport'][0])
    {

        // verify the required parameter 'clientid' is set
        if ($clientid === null || (is_array($clientid) && count($clientid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientid when calling remittanceRangeReport'
            );
        }

        // verify the required parameter 'remittance_report_request' is set
        if ($remittance_report_request === null || (is_array($remittance_report_request) && count($remittance_report_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $remittance_report_request when calling remittanceRangeReport'
            );
        }


        $resourcePath = '/v6/remittance/report/{clientid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clientid !== null) {
            $resourcePath = str_replace(
                '{' . 'clientid' . '}',
                ObjectSerializer::toPathValue($clientid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remittance_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remittance_report_request));
            } else {
                $httpBody = $remittance_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remittanceReportRequest
     *
     * Remittance Date Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  string $date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\RemittedClientData|\CityPay\Model\Error
     */
    public function remittanceReportRequest($clientid, $date, string $contentType = self::contentTypes['remittanceReportRequest'][0])
    {
        list($response) = $this->remittanceReportRequestWithHttpInfo($clientid, $date, $contentType);
        return $response;
    }

    /**
     * Operation remittanceReportRequestWithHttpInfo
     *
     * Remittance Date Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  string $date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceReportRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\RemittedClientData|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function remittanceReportRequestWithHttpInfo($clientid, $date, string $contentType = self::contentTypes['remittanceReportRequest'][0])
    {
        $request = $this->remittanceReportRequestRequest($clientid, $date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\RemittedClientData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\RemittedClientData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\RemittedClientData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\RemittedClientData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\RemittedClientData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remittanceReportRequestAsync
     *
     * Remittance Date Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  string $date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remittanceReportRequestAsync($clientid, $date, string $contentType = self::contentTypes['remittanceReportRequest'][0])
    {
        return $this->remittanceReportRequestAsyncWithHttpInfo($clientid, $date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remittanceReportRequestAsyncWithHttpInfo
     *
     * Remittance Date Report Request
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  string $date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remittanceReportRequestAsyncWithHttpInfo($clientid, $date, string $contentType = self::contentTypes['remittanceReportRequest'][0])
    {
        $returnType = '\CityPay\Model\RemittedClientData';
        $request = $this->remittanceReportRequestRequest($clientid, $date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remittanceReportRequest'
     *
     * @param  string $clientid A client Id for which data is requested. (required)
     * @param  string $date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remittanceReportRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remittanceReportRequestRequest($clientid, $date, string $contentType = self::contentTypes['remittanceReportRequest'][0])
    {

        // verify the required parameter 'clientid' is set
        if ($clientid === null || (is_array($clientid) && count($clientid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientid when calling remittanceReportRequest'
            );
        }

        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling remittanceReportRequest'
            );
        }


        $resourcePath = '/v6/remittance/report/{clientid}/{date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clientid !== null) {
            $resourcePath = str_replace(
                '{' . 'clientid' . '}',
                ObjectSerializer::toPathValue($clientid),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
