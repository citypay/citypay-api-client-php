<?php
/**
 * DirectPostApi
 * PHP version 7.4
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CityPay\ApiException;
use CityPay\Configuration;
use CityPay\HeaderSelector;
use CityPay\ObjectSerializer;

/**
 * DirectPostApi Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DirectPostApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'directCResAuthRequest' => [
            'application/x-www-form-urlencoded',
        ],
        'directCResTokeniseRequest' => [
            'application/x-www-form-urlencoded',
        ],
        'directPostAuthRequest' => [
            'application/json',
            'application/x-www-form-urlencoded',
            'text/xml',
        ],
        'directPostTokeniseRequest' => [
            'application/json',
            'application/x-www-form-urlencoded',
            'text/xml',
        ],
        'tokenRequest' => [
            'application/json',
            'application/x-www-form-urlencoded',
            'text/xml',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation directCResAuthRequest
     *
     * Handles a CRes response from ACS, returning back the result of authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResAuthRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error
     */
    public function directCResAuthRequest($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResAuthRequest'][0])
    {
        list($response) = $this->directCResAuthRequestWithHttpInfo($uuid, $cres, $three_ds_session_data, $contentType);
        return $response;
    }

    /**
     * Operation directCResAuthRequestWithHttpInfo
     *
     * Handles a CRes response from ACS, returning back the result of authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResAuthRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function directCResAuthRequestWithHttpInfo($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResAuthRequest'][0])
    {
        $request = $this->directCResAuthRequestRequest($uuid, $cres, $three_ds_session_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 303:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 307:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\AuthResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 307:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directCResAuthRequestAsync
     *
     * Handles a CRes response from ACS, returning back the result of authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directCResAuthRequestAsync($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResAuthRequest'][0])
    {
        return $this->directCResAuthRequestAsyncWithHttpInfo($uuid, $cres, $three_ds_session_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directCResAuthRequestAsyncWithHttpInfo
     *
     * Handles a CRes response from ACS, returning back the result of authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directCResAuthRequestAsyncWithHttpInfo($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResAuthRequest'][0])
    {
        $returnType = '\CityPay\Model\AuthResponse';
        $request = $this->directCResAuthRequestRequest($uuid, $cres, $three_ds_session_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directCResAuthRequest'
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directCResAuthRequestRequest($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResAuthRequest'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling directCResAuthRequest'
            );
        }




        $resourcePath = '/direct/cres/auth/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // form params
        if ($cres !== null) {
            $formParams['cres'] = ObjectSerializer::toFormValue($cres);
        }
        // form params
        if ($three_ds_session_data !== null) {
            $formParams['threeDSSessionData'] = ObjectSerializer::toFormValue($three_ds_session_data);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directCResTokeniseRequest
     *
     * Handles a CRes response from ACS, returning back a token for future authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\TokenisationResponseModel|\CityPay\Model\TokenisationResponseModel|\CityPay\Model\Error|\CityPay\Model\Error
     */
    public function directCResTokeniseRequest($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResTokeniseRequest'][0])
    {
        list($response) = $this->directCResTokeniseRequestWithHttpInfo($uuid, $cres, $three_ds_session_data, $contentType);
        return $response;
    }

    /**
     * Operation directCResTokeniseRequestWithHttpInfo
     *
     * Handles a CRes response from ACS, returning back a token for future authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\TokenisationResponseModel|\CityPay\Model\TokenisationResponseModel|\CityPay\Model\Error|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function directCResTokeniseRequestWithHttpInfo($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResTokeniseRequest'][0])
    {
        $request = $this->directCResTokeniseRequestRequest($uuid, $cres, $three_ds_session_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\TokenisationResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\TokenisationResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\TokenisationResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 303:
                    if ('\CityPay\Model\TokenisationResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\TokenisationResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\TokenisationResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 307:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\TokenisationResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\TokenisationResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\TokenisationResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 307:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directCResTokeniseRequestAsync
     *
     * Handles a CRes response from ACS, returning back a token for future authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directCResTokeniseRequestAsync($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResTokeniseRequest'][0])
    {
        return $this->directCResTokeniseRequestAsyncWithHttpInfo($uuid, $cres, $three_ds_session_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directCResTokeniseRequestAsyncWithHttpInfo
     *
     * Handles a CRes response from ACS, returning back a token for future authorisation
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directCResTokeniseRequestAsyncWithHttpInfo($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResTokeniseRequest'][0])
    {
        $returnType = '\CityPay\Model\TokenisationResponseModel';
        $request = $this->directCResTokeniseRequestRequest($uuid, $cres, $three_ds_session_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directCResTokeniseRequest'
     *
     * @param  string $uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param  string $cres The CRES from the ACS. (optional)
     * @param  string $three_ds_session_data The session data from the ACS. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directCResTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directCResTokeniseRequestRequest($uuid, $cres = null, $three_ds_session_data = null, string $contentType = self::contentTypes['directCResTokeniseRequest'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling directCResTokeniseRequest'
            );
        }




        $resourcePath = '/direct/cres/tokenise/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // form params
        if ($cres !== null) {
            $formParams['cres'] = ObjectSerializer::toFormValue($cres);
        }
        // form params
        if ($three_ds_session_data !== null) {
            $formParams['threeDSSessionData'] = ObjectSerializer::toFormValue($three_ds_session_data);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directPostAuthRequest
     *
     * Direct Post Auth Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostAuthRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error
     */
    public function directPostAuthRequest($direct_post_request, string $contentType = self::contentTypes['directPostAuthRequest'][0])
    {
        list($response) = $this->directPostAuthRequestWithHttpInfo($direct_post_request, $contentType);
        return $response;
    }

    /**
     * Operation directPostAuthRequestWithHttpInfo
     *
     * Direct Post Auth Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostAuthRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function directPostAuthRequestWithHttpInfo($direct_post_request, string $contentType = self::contentTypes['directPostAuthRequest'][0])
    {
        $request = $this->directPostAuthRequestRequest($direct_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 303:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 307:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\AuthResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 307:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directPostAuthRequestAsync
     *
     * Direct Post Auth Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPostAuthRequestAsync($direct_post_request, string $contentType = self::contentTypes['directPostAuthRequest'][0])
    {
        return $this->directPostAuthRequestAsyncWithHttpInfo($direct_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directPostAuthRequestAsyncWithHttpInfo
     *
     * Direct Post Auth Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPostAuthRequestAsyncWithHttpInfo($direct_post_request, string $contentType = self::contentTypes['directPostAuthRequest'][0])
    {
        $returnType = '\CityPay\Model\AuthResponse';
        $request = $this->directPostAuthRequestRequest($direct_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directPostAuthRequest'
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directPostAuthRequestRequest($direct_post_request, string $contentType = self::contentTypes['directPostAuthRequest'][0])
    {

        // verify the required parameter 'direct_post_request' is set
        if ($direct_post_request === null || (is_array($direct_post_request) && count($direct_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direct_post_request when calling directPostAuthRequest'
            );
        }


        $resourcePath = '/direct/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($direct_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($direct_post_request));
            } else {
                $httpBody = $direct_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-domain-key');
        if ($apiKey !== null) {
            $queryParams['cp-domain-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directPostTokeniseRequest
     *
     * Direct Post Tokenise Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error
     */
    public function directPostTokeniseRequest($direct_post_request, string $contentType = self::contentTypes['directPostTokeniseRequest'][0])
    {
        list($response) = $this->directPostTokeniseRequestWithHttpInfo($direct_post_request, $contentType);
        return $response;
    }

    /**
     * Operation directPostTokeniseRequestWithHttpInfo
     *
     * Direct Post Tokenise Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function directPostTokeniseRequestWithHttpInfo($direct_post_request, string $contentType = self::contentTypes['directPostTokeniseRequest'][0])
    {
        $request = $this->directPostTokeniseRequestRequest($direct_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 303:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 307:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\AuthResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 307:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directPostTokeniseRequestAsync
     *
     * Direct Post Tokenise Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPostTokeniseRequestAsync($direct_post_request, string $contentType = self::contentTypes['directPostTokeniseRequest'][0])
    {
        return $this->directPostTokeniseRequestAsyncWithHttpInfo($direct_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directPostTokeniseRequestAsyncWithHttpInfo
     *
     * Direct Post Tokenise Request
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPostTokeniseRequestAsyncWithHttpInfo($direct_post_request, string $contentType = self::contentTypes['directPostTokeniseRequest'][0])
    {
        $returnType = '\CityPay\Model\AuthResponse';
        $request = $this->directPostTokeniseRequestRequest($direct_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directPostTokeniseRequest'
     *
     * @param  \CityPay\Model\DirectPostRequest $direct_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directPostTokeniseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directPostTokeniseRequestRequest($direct_post_request, string $contentType = self::contentTypes['directPostTokeniseRequest'][0])
    {

        // verify the required parameter 'direct_post_request' is set
        if ($direct_post_request === null || (is_array($direct_post_request) && count($direct_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direct_post_request when calling directPostTokeniseRequest'
            );
        }


        $resourcePath = '/direct/tokenise';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($direct_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($direct_post_request));
            } else {
                $httpBody = $direct_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-domain-key');
        if ($apiKey !== null) {
            $queryParams['cp-domain-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenRequest
     *
     * Direct Post Token Request
     *
     * @param  \CityPay\Model\DirectTokenAuthRequest $direct_token_auth_request direct_token_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error
     */
    public function tokenRequest($direct_token_auth_request, string $contentType = self::contentTypes['tokenRequest'][0])
    {
        list($response) = $this->tokenRequestWithHttpInfo($direct_token_auth_request, $contentType);
        return $response;
    }

    /**
     * Operation tokenRequestWithHttpInfo
     *
     * Direct Post Token Request
     *
     * @param  \CityPay\Model\DirectTokenAuthRequest $direct_token_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRequest'] to see the possible values for this operation
     *
     * @throws \CityPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CityPay\Model\AuthResponse|\CityPay\Model\AuthResponse|\CityPay\Model\Error|\CityPay\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenRequestWithHttpInfo($direct_token_auth_request, string $contentType = self::contentTypes['tokenRequest'][0])
    {
        $request = $this->tokenRequestRequest($direct_token_auth_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 303:
                    if ('\CityPay\Model\AuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\AuthResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\AuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 307:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if ('\CityPay\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CityPay\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CityPay\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CityPay\Model\AuthResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\AuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 307:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CityPay\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenRequestAsync
     *
     * Direct Post Token Request
     *
     * @param  \CityPay\Model\DirectTokenAuthRequest $direct_token_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenRequestAsync($direct_token_auth_request, string $contentType = self::contentTypes['tokenRequest'][0])
    {
        return $this->tokenRequestAsyncWithHttpInfo($direct_token_auth_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenRequestAsyncWithHttpInfo
     *
     * Direct Post Token Request
     *
     * @param  \CityPay\Model\DirectTokenAuthRequest $direct_token_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenRequestAsyncWithHttpInfo($direct_token_auth_request, string $contentType = self::contentTypes['tokenRequest'][0])
    {
        $returnType = '\CityPay\Model\AuthResponse';
        $request = $this->tokenRequestRequest($direct_token_auth_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenRequest'
     *
     * @param  \CityPay\Model\DirectTokenAuthRequest $direct_token_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenRequestRequest($direct_token_auth_request, string $contentType = self::contentTypes['tokenRequest'][0])
    {

        // verify the required parameter 'direct_token_auth_request' is set
        if ($direct_token_auth_request === null || (is_array($direct_token_auth_request) && count($direct_token_auth_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direct_token_auth_request when calling tokenRequest'
            );
        }


        $resourcePath = '/direct/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($direct_token_auth_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($direct_token_auth_request));
            } else {
                $httpBody = $direct_token_auth_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-domain-key');
        if ($apiKey !== null) {
            $queryParams['cp-domain-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cp-api-key');
        if ($apiKey !== null) {
            $headers['cp-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
