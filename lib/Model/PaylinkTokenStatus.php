<?php
/**
 * PaylinkTokenStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Model;

use \ArrayAccess;
use \CityPay\ObjectSerializer;

/**
 * PaylinkTokenStatus Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaylinkTokenStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaylinkTokenStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_paid' => 'int',
        'auth_code' => 'string',
        'card' => 'string',
        'created' => '\DateTime',
        'datetime' => '\DateTime',
        'identifier' => 'string',
        'is_attachment' => 'bool',
        'is_cancelled' => 'bool',
        'is_closed' => 'bool',
        'is_customer_receipt_email_sent' => 'bool',
        'is_email_sent' => 'bool',
        'is_expired' => 'bool',
        'is_form_viewed' => 'bool',
        'is_merchant_notification_email_sent' => 'bool',
        'is_open_for_payment' => 'bool',
        'is_paid' => 'bool',
        'is_payment_attempted' => 'bool',
        'is_postback_ok' => 'bool',
        'is_request_challenged' => 'bool',
        'is_sms_sent' => 'bool',
        'is_validated' => 'bool',
        'last_event_date_time' => '\DateTime',
        'last_payment_result' => 'string',
        'mid' => 'int',
        'payment_attempts_count' => 'int',
        'state_history' => '\CityPay\Model\PaylinkStateEvent[]',
        'token' => 'string',
        'trans_no' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_paid' => 'int32',
        'auth_code' => null,
        'card' => null,
        'created' => 'date-time',
        'datetime' => 'date-time',
        'identifier' => null,
        'is_attachment' => null,
        'is_cancelled' => null,
        'is_closed' => null,
        'is_customer_receipt_email_sent' => null,
        'is_email_sent' => null,
        'is_expired' => null,
        'is_form_viewed' => null,
        'is_merchant_notification_email_sent' => null,
        'is_open_for_payment' => null,
        'is_paid' => null,
        'is_payment_attempted' => null,
        'is_postback_ok' => null,
        'is_request_challenged' => null,
        'is_sms_sent' => null,
        'is_validated' => null,
        'last_event_date_time' => 'date-time',
        'last_payment_result' => null,
        'mid' => 'int32',
        'payment_attempts_count' => 'int32',
        'state_history' => null,
        'token' => null,
        'trans_no' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_paid' => false,
        'auth_code' => false,
        'card' => false,
        'created' => false,
        'datetime' => false,
        'identifier' => false,
        'is_attachment' => false,
        'is_cancelled' => false,
        'is_closed' => false,
        'is_customer_receipt_email_sent' => false,
        'is_email_sent' => false,
        'is_expired' => false,
        'is_form_viewed' => false,
        'is_merchant_notification_email_sent' => false,
        'is_open_for_payment' => false,
        'is_paid' => false,
        'is_payment_attempted' => false,
        'is_postback_ok' => false,
        'is_request_challenged' => false,
        'is_sms_sent' => false,
        'is_validated' => false,
        'last_event_date_time' => false,
        'last_payment_result' => false,
        'mid' => false,
        'payment_attempts_count' => false,
        'state_history' => false,
        'token' => false,
        'trans_no' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_paid' => 'amount_paid',
        'auth_code' => 'auth_code',
        'card' => 'card',
        'created' => 'created',
        'datetime' => 'datetime',
        'identifier' => 'identifier',
        'is_attachment' => 'is_attachment',
        'is_cancelled' => 'is_cancelled',
        'is_closed' => 'is_closed',
        'is_customer_receipt_email_sent' => 'is_customer_receipt_email_sent',
        'is_email_sent' => 'is_email_sent',
        'is_expired' => 'is_expired',
        'is_form_viewed' => 'is_form_viewed',
        'is_merchant_notification_email_sent' => 'is_merchant_notification_email_sent',
        'is_open_for_payment' => 'is_open_for_payment',
        'is_paid' => 'is_paid',
        'is_payment_attempted' => 'is_payment_attempted',
        'is_postback_ok' => 'is_postback_ok',
        'is_request_challenged' => 'is_request_challenged',
        'is_sms_sent' => 'is_sms_sent',
        'is_validated' => 'is_validated',
        'last_event_date_time' => 'last_event_date_time',
        'last_payment_result' => 'last_payment_result',
        'mid' => 'mid',
        'payment_attempts_count' => 'payment_attempts_count',
        'state_history' => 'state_history',
        'token' => 'token',
        'trans_no' => 'trans_no'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_paid' => 'setAmountPaid',
        'auth_code' => 'setAuthCode',
        'card' => 'setCard',
        'created' => 'setCreated',
        'datetime' => 'setDatetime',
        'identifier' => 'setIdentifier',
        'is_attachment' => 'setIsAttachment',
        'is_cancelled' => 'setIsCancelled',
        'is_closed' => 'setIsClosed',
        'is_customer_receipt_email_sent' => 'setIsCustomerReceiptEmailSent',
        'is_email_sent' => 'setIsEmailSent',
        'is_expired' => 'setIsExpired',
        'is_form_viewed' => 'setIsFormViewed',
        'is_merchant_notification_email_sent' => 'setIsMerchantNotificationEmailSent',
        'is_open_for_payment' => 'setIsOpenForPayment',
        'is_paid' => 'setIsPaid',
        'is_payment_attempted' => 'setIsPaymentAttempted',
        'is_postback_ok' => 'setIsPostbackOk',
        'is_request_challenged' => 'setIsRequestChallenged',
        'is_sms_sent' => 'setIsSmsSent',
        'is_validated' => 'setIsValidated',
        'last_event_date_time' => 'setLastEventDateTime',
        'last_payment_result' => 'setLastPaymentResult',
        'mid' => 'setMid',
        'payment_attempts_count' => 'setPaymentAttemptsCount',
        'state_history' => 'setStateHistory',
        'token' => 'setToken',
        'trans_no' => 'setTransNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_paid' => 'getAmountPaid',
        'auth_code' => 'getAuthCode',
        'card' => 'getCard',
        'created' => 'getCreated',
        'datetime' => 'getDatetime',
        'identifier' => 'getIdentifier',
        'is_attachment' => 'getIsAttachment',
        'is_cancelled' => 'getIsCancelled',
        'is_closed' => 'getIsClosed',
        'is_customer_receipt_email_sent' => 'getIsCustomerReceiptEmailSent',
        'is_email_sent' => 'getIsEmailSent',
        'is_expired' => 'getIsExpired',
        'is_form_viewed' => 'getIsFormViewed',
        'is_merchant_notification_email_sent' => 'getIsMerchantNotificationEmailSent',
        'is_open_for_payment' => 'getIsOpenForPayment',
        'is_paid' => 'getIsPaid',
        'is_payment_attempted' => 'getIsPaymentAttempted',
        'is_postback_ok' => 'getIsPostbackOk',
        'is_request_challenged' => 'getIsRequestChallenged',
        'is_sms_sent' => 'getIsSmsSent',
        'is_validated' => 'getIsValidated',
        'last_event_date_time' => 'getLastEventDateTime',
        'last_payment_result' => 'getLastPaymentResult',
        'mid' => 'getMid',
        'payment_attempts_count' => 'getPaymentAttemptsCount',
        'state_history' => 'getStateHistory',
        'token' => 'getToken',
        'trans_no' => 'getTransNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount_paid', $data ?? [], null);
        $this->setIfExists('auth_code', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('datetime', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('is_attachment', $data ?? [], null);
        $this->setIfExists('is_cancelled', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('is_customer_receipt_email_sent', $data ?? [], null);
        $this->setIfExists('is_email_sent', $data ?? [], null);
        $this->setIfExists('is_expired', $data ?? [], null);
        $this->setIfExists('is_form_viewed', $data ?? [], null);
        $this->setIfExists('is_merchant_notification_email_sent', $data ?? [], null);
        $this->setIfExists('is_open_for_payment', $data ?? [], null);
        $this->setIfExists('is_paid', $data ?? [], null);
        $this->setIfExists('is_payment_attempted', $data ?? [], null);
        $this->setIfExists('is_postback_ok', $data ?? [], null);
        $this->setIfExists('is_request_challenged', $data ?? [], null);
        $this->setIfExists('is_sms_sent', $data ?? [], null);
        $this->setIfExists('is_validated', $data ?? [], null);
        $this->setIfExists('last_event_date_time', $data ?? [], null);
        $this->setIfExists('last_payment_result', $data ?? [], null);
        $this->setIfExists('mid', $data ?? [], null);
        $this->setIfExists('payment_attempts_count', $data ?? [], null);
        $this->setIfExists('state_history', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('trans_no', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) < 4)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be bigger than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_paid
     *
     * @return int|null
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param int|null $amount_paid the amount that has been paid against the session.
     *
     * @return self
     */
    public function setAmountPaid($amount_paid)
    {
        if (is_null($amount_paid)) {
            throw new \InvalidArgumentException('non-nullable amount_paid cannot be null');
        }
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code an authorisation code if the transaction was processed and isPaid is true.
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {
        if (is_null($auth_code)) {
            throw new \InvalidArgumentException('non-nullable auth_code cannot be null');
        }
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets card
     *
     * @return string|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param string|null $card a description of the card that was used for payment if paid.
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created the date and time that the session was created.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime|null
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime|null $datetime the date and time of the current status.
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        if (is_null($datetime)) {
            throw new \InvalidArgumentException('non-nullable datetime cannot be null');
        }
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier the merchant identifier, to help identifying the token.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        if ((mb_strlen($identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling PaylinkTokenStatus., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($identifier) < 4)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling PaylinkTokenStatus., must be bigger than or equal to 4.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets is_attachment
     *
     * @return bool|null
     */
    public function getIsAttachment()
    {
        return $this->container['is_attachment'];
    }

    /**
     * Sets is_attachment
     *
     * @param bool|null $is_attachment true if an attachment exists.
     *
     * @return self
     */
    public function setIsAttachment($is_attachment)
    {
        if (is_null($is_attachment)) {
            throw new \InvalidArgumentException('non-nullable is_attachment cannot be null');
        }
        $this->container['is_attachment'] = $is_attachment;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool|null
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool|null $is_cancelled true if the session was cancelled either by the user or by a system request.
     *
     * @return self
     */
    public function setIsCancelled($is_cancelled)
    {
        if (is_null($is_cancelled)) {
            throw new \InvalidArgumentException('non-nullable is_cancelled cannot be null');
        }
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool|null $is_closed true if the token has been closed.
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets is_customer_receipt_email_sent
     *
     * @return bool|null
     */
    public function getIsCustomerReceiptEmailSent()
    {
        return $this->container['is_customer_receipt_email_sent'];
    }

    /**
     * Sets is_customer_receipt_email_sent
     *
     * @param bool|null $is_customer_receipt_email_sent true if a customer receipt has been sent.
     *
     * @return self
     */
    public function setIsCustomerReceiptEmailSent($is_customer_receipt_email_sent)
    {
        if (is_null($is_customer_receipt_email_sent)) {
            throw new \InvalidArgumentException('non-nullable is_customer_receipt_email_sent cannot be null');
        }
        $this->container['is_customer_receipt_email_sent'] = $is_customer_receipt_email_sent;

        return $this;
    }

    /**
     * Gets is_email_sent
     *
     * @return bool|null
     */
    public function getIsEmailSent()
    {
        return $this->container['is_email_sent'];
    }

    /**
     * Sets is_email_sent
     *
     * @param bool|null $is_email_sent true if an email was sent.
     *
     * @return self
     */
    public function setIsEmailSent($is_email_sent)
    {
        if (is_null($is_email_sent)) {
            throw new \InvalidArgumentException('non-nullable is_email_sent cannot be null');
        }
        $this->container['is_email_sent'] = $is_email_sent;

        return $this;
    }

    /**
     * Gets is_expired
     *
     * @return bool|null
     */
    public function getIsExpired()
    {
        return $this->container['is_expired'];
    }

    /**
     * Sets is_expired
     *
     * @param bool|null $is_expired true if the session has expired.
     *
     * @return self
     */
    public function setIsExpired($is_expired)
    {
        if (is_null($is_expired)) {
            throw new \InvalidArgumentException('non-nullable is_expired cannot be null');
        }
        $this->container['is_expired'] = $is_expired;

        return $this;
    }

    /**
     * Gets is_form_viewed
     *
     * @return bool|null
     */
    public function getIsFormViewed()
    {
        return $this->container['is_form_viewed'];
    }

    /**
     * Sets is_form_viewed
     *
     * @param bool|null $is_form_viewed true if the form was ever displayed to the addressee.
     *
     * @return self
     */
    public function setIsFormViewed($is_form_viewed)
    {
        if (is_null($is_form_viewed)) {
            throw new \InvalidArgumentException('non-nullable is_form_viewed cannot be null');
        }
        $this->container['is_form_viewed'] = $is_form_viewed;

        return $this;
    }

    /**
     * Gets is_merchant_notification_email_sent
     *
     * @return bool|null
     */
    public function getIsMerchantNotificationEmailSent()
    {
        return $this->container['is_merchant_notification_email_sent'];
    }

    /**
     * Sets is_merchant_notification_email_sent
     *
     * @param bool|null $is_merchant_notification_email_sent true if a merchant notification receipt was sent.
     *
     * @return self
     */
    public function setIsMerchantNotificationEmailSent($is_merchant_notification_email_sent)
    {
        if (is_null($is_merchant_notification_email_sent)) {
            throw new \InvalidArgumentException('non-nullable is_merchant_notification_email_sent cannot be null');
        }
        $this->container['is_merchant_notification_email_sent'] = $is_merchant_notification_email_sent;

        return $this;
    }

    /**
     * Gets is_open_for_payment
     *
     * @return bool|null
     */
    public function getIsOpenForPayment()
    {
        return $this->container['is_open_for_payment'];
    }

    /**
     * Sets is_open_for_payment
     *
     * @param bool|null $is_open_for_payment true if the session is still open for payment or false if it has been closed.
     *
     * @return self
     */
    public function setIsOpenForPayment($is_open_for_payment)
    {
        if (is_null($is_open_for_payment)) {
            throw new \InvalidArgumentException('non-nullable is_open_for_payment cannot be null');
        }
        $this->container['is_open_for_payment'] = $is_open_for_payment;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool|null
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool|null $is_paid whether the session has been paid and therefore can be considered as complete.
     *
     * @return self
     */
    public function setIsPaid($is_paid)
    {
        if (is_null($is_paid)) {
            throw new \InvalidArgumentException('non-nullable is_paid cannot be null');
        }
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets is_payment_attempted
     *
     * @return bool|null
     */
    public function getIsPaymentAttempted()
    {
        return $this->container['is_payment_attempted'];
    }

    /**
     * Sets is_payment_attempted
     *
     * @param bool|null $is_payment_attempted true if payment has been attempted.
     *
     * @return self
     */
    public function setIsPaymentAttempted($is_payment_attempted)
    {
        if (is_null($is_payment_attempted)) {
            throw new \InvalidArgumentException('non-nullable is_payment_attempted cannot be null');
        }
        $this->container['is_payment_attempted'] = $is_payment_attempted;

        return $this;
    }

    /**
     * Gets is_postback_ok
     *
     * @return bool|null
     */
    public function getIsPostbackOk()
    {
        return $this->container['is_postback_ok'];
    }

    /**
     * Sets is_postback_ok
     *
     * @param bool|null $is_postback_ok true if a post back was executed successfully.
     *
     * @return self
     */
    public function setIsPostbackOk($is_postback_ok)
    {
        if (is_null($is_postback_ok)) {
            throw new \InvalidArgumentException('non-nullable is_postback_ok cannot be null');
        }
        $this->container['is_postback_ok'] = $is_postback_ok;

        return $this;
    }

    /**
     * Gets is_request_challenged
     *
     * @return bool|null
     */
    public function getIsRequestChallenged()
    {
        return $this->container['is_request_challenged'];
    }

    /**
     * Sets is_request_challenged
     *
     * @param bool|null $is_request_challenged true if the request has been challenged using 3-D Secure.
     *
     * @return self
     */
    public function setIsRequestChallenged($is_request_challenged)
    {
        if (is_null($is_request_challenged)) {
            throw new \InvalidArgumentException('non-nullable is_request_challenged cannot be null');
        }
        $this->container['is_request_challenged'] = $is_request_challenged;

        return $this;
    }

    /**
     * Gets is_sms_sent
     *
     * @return bool|null
     */
    public function getIsSmsSent()
    {
        return $this->container['is_sms_sent'];
    }

    /**
     * Sets is_sms_sent
     *
     * @param bool|null $is_sms_sent true if an SMS was sent.
     *
     * @return self
     */
    public function setIsSmsSent($is_sms_sent)
    {
        if (is_null($is_sms_sent)) {
            throw new \InvalidArgumentException('non-nullable is_sms_sent cannot be null');
        }
        $this->container['is_sms_sent'] = $is_sms_sent;

        return $this;
    }

    /**
     * Gets is_validated
     *
     * @return bool|null
     */
    public function getIsValidated()
    {
        return $this->container['is_validated'];
    }

    /**
     * Sets is_validated
     *
     * @param bool|null $is_validated whether the token generation was successfully validated.
     *
     * @return self
     */
    public function setIsValidated($is_validated)
    {
        if (is_null($is_validated)) {
            throw new \InvalidArgumentException('non-nullable is_validated cannot be null');
        }
        $this->container['is_validated'] = $is_validated;

        return $this;
    }

    /**
     * Gets last_event_date_time
     *
     * @return \DateTime|null
     */
    public function getLastEventDateTime()
    {
        return $this->container['last_event_date_time'];
    }

    /**
     * Sets last_event_date_time
     *
     * @param \DateTime|null $last_event_date_time the date and time that the session last had an event actioned against it.
     *
     * @return self
     */
    public function setLastEventDateTime($last_event_date_time)
    {
        if (is_null($last_event_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_event_date_time cannot be null');
        }
        $this->container['last_event_date_time'] = $last_event_date_time;

        return $this;
    }

    /**
     * Gets last_payment_result
     *
     * @return string|null
     */
    public function getLastPaymentResult()
    {
        return $this->container['last_payment_result'];
    }

    /**
     * Sets last_payment_result
     *
     * @param string|null $last_payment_result the result of the last payment if one exists.
     *
     * @return self
     */
    public function setLastPaymentResult($last_payment_result)
    {
        if (is_null($last_payment_result)) {
            throw new \InvalidArgumentException('non-nullable last_payment_result cannot be null');
        }
        $this->container['last_payment_result'] = $last_payment_result;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return int|null
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param int|null $mid identifies the merchant account.
     *
     * @return self
     */
    public function setMid($mid)
    {
        if (is_null($mid)) {
            throw new \InvalidArgumentException('non-nullable mid cannot be null');
        }
        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets payment_attempts_count
     *
     * @return int|null
     */
    public function getPaymentAttemptsCount()
    {
        return $this->container['payment_attempts_count'];
    }

    /**
     * Sets payment_attempts_count
     *
     * @param int|null $payment_attempts_count the number of attempts made to pay.
     *
     * @return self
     */
    public function setPaymentAttemptsCount($payment_attempts_count)
    {
        if (is_null($payment_attempts_count)) {
            throw new \InvalidArgumentException('non-nullable payment_attempts_count cannot be null');
        }
        $this->container['payment_attempts_count'] = $payment_attempts_count;

        return $this;
    }

    /**
     * Gets state_history
     *
     * @return \CityPay\Model\PaylinkStateEvent[]|null
     */
    public function getStateHistory()
    {
        return $this->container['state_history'];
    }

    /**
     * Sets state_history
     *
     * @param \CityPay\Model\PaylinkStateEvent[]|null $state_history state_history
     *
     * @return self
     */
    public function setStateHistory($state_history)
    {
        if (is_null($state_history)) {
            throw new \InvalidArgumentException('non-nullable state_history cannot be null');
        }
        $this->container['state_history'] = $state_history;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token the token value which uniquely identifies the session.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets trans_no
     *
     * @return int|null
     */
    public function getTransNo()
    {
        return $this->container['trans_no'];
    }

    /**
     * Sets trans_no
     *
     * @param int|null $trans_no a transaction number if the transacstion was processed and isPaid is true.
     *
     * @return self
     */
    public function setTransNo($trans_no)
    {
        if (is_null($trans_no)) {
            throw new \InvalidArgumentException('non-nullable trans_no cannot be null');
        }
        $this->container['trans_no'] = $trans_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


