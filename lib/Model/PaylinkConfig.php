<?php
/**
 * PaylinkConfig
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Model;

use \ArrayAccess;
use \CityPay\ObjectSerializer;

/**
 * PaylinkConfig Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaylinkConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaylinkConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acs_mode' => 'string',
        'custom_params' => '\CityPay\Model\PaylinkCustomParam[]',
        'descriptor' => 'string',
        'expire_in' => 'string',
        'field_guard' => '\CityPay\Model\PaylinkFieldGuardModel[]',
        'lock_params' => 'string[]',
        'merch_logo' => 'string',
        'merch_terms' => 'string',
        'options' => 'string[]',
        'part_payments' => '\CityPay\Model\PaylinkPartPayments',
        'pass_through_data' => 'array<string,string>',
        'pass_through_headers' => 'array<string,string>',
        'postback' => 'string',
        'postback_password' => 'string',
        'postback_policy' => 'string',
        'postback_username' => 'string',
        'redirect_delay' => 'int',
        'redirect_failure' => 'string',
        'redirect_success' => 'string',
        'renderer' => 'string',
        'return_params' => 'bool',
        'ui' => '\CityPay\Model\PaylinkUI'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acs_mode' => null,
        'custom_params' => null,
        'descriptor' => null,
        'expire_in' => null,
        'field_guard' => null,
        'lock_params' => null,
        'merch_logo' => 'url',
        'merch_terms' => 'url',
        'options' => null,
        'part_payments' => null,
        'pass_through_data' => null,
        'pass_through_headers' => null,
        'postback' => 'url',
        'postback_password' => null,
        'postback_policy' => null,
        'postback_username' => null,
        'redirect_delay' => 'int32',
        'redirect_failure' => 'url',
        'redirect_success' => 'url',
        'renderer' => null,
        'return_params' => null,
        'ui' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acs_mode' => 'acs_mode',
        'custom_params' => 'custom_params',
        'descriptor' => 'descriptor',
        'expire_in' => 'expire_in',
        'field_guard' => 'field_guard',
        'lock_params' => 'lock_params',
        'merch_logo' => 'merch_logo',
        'merch_terms' => 'merch_terms',
        'options' => 'options',
        'part_payments' => 'part_payments',
        'pass_through_data' => 'pass_through_data',
        'pass_through_headers' => 'pass_through_headers',
        'postback' => 'postback',
        'postback_password' => 'postback_password',
        'postback_policy' => 'postback_policy',
        'postback_username' => 'postback_username',
        'redirect_delay' => 'redirect_delay',
        'redirect_failure' => 'redirect_failure',
        'redirect_success' => 'redirect_success',
        'renderer' => 'renderer',
        'return_params' => 'return_params',
        'ui' => 'ui'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acs_mode' => 'setAcsMode',
        'custom_params' => 'setCustomParams',
        'descriptor' => 'setDescriptor',
        'expire_in' => 'setExpireIn',
        'field_guard' => 'setFieldGuard',
        'lock_params' => 'setLockParams',
        'merch_logo' => 'setMerchLogo',
        'merch_terms' => 'setMerchTerms',
        'options' => 'setOptions',
        'part_payments' => 'setPartPayments',
        'pass_through_data' => 'setPassThroughData',
        'pass_through_headers' => 'setPassThroughHeaders',
        'postback' => 'setPostback',
        'postback_password' => 'setPostbackPassword',
        'postback_policy' => 'setPostbackPolicy',
        'postback_username' => 'setPostbackUsername',
        'redirect_delay' => 'setRedirectDelay',
        'redirect_failure' => 'setRedirectFailure',
        'redirect_success' => 'setRedirectSuccess',
        'renderer' => 'setRenderer',
        'return_params' => 'setReturnParams',
        'ui' => 'setUi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acs_mode' => 'getAcsMode',
        'custom_params' => 'getCustomParams',
        'descriptor' => 'getDescriptor',
        'expire_in' => 'getExpireIn',
        'field_guard' => 'getFieldGuard',
        'lock_params' => 'getLockParams',
        'merch_logo' => 'getMerchLogo',
        'merch_terms' => 'getMerchTerms',
        'options' => 'getOptions',
        'part_payments' => 'getPartPayments',
        'pass_through_data' => 'getPassThroughData',
        'pass_through_headers' => 'getPassThroughHeaders',
        'postback' => 'getPostback',
        'postback_password' => 'getPostbackPassword',
        'postback_policy' => 'getPostbackPolicy',
        'postback_username' => 'getPostbackUsername',
        'redirect_delay' => 'getRedirectDelay',
        'redirect_failure' => 'getRedirectFailure',
        'redirect_success' => 'getRedirectSuccess',
        'renderer' => 'getRenderer',
        'return_params' => 'getReturnParams',
        'ui' => 'getUi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acs_mode'] = $data['acs_mode'] ?? null;
        $this->container['custom_params'] = $data['custom_params'] ?? null;
        $this->container['descriptor'] = $data['descriptor'] ?? null;
        $this->container['expire_in'] = $data['expire_in'] ?? null;
        $this->container['field_guard'] = $data['field_guard'] ?? null;
        $this->container['lock_params'] = $data['lock_params'] ?? null;
        $this->container['merch_logo'] = $data['merch_logo'] ?? null;
        $this->container['merch_terms'] = $data['merch_terms'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['part_payments'] = $data['part_payments'] ?? null;
        $this->container['pass_through_data'] = $data['pass_through_data'] ?? null;
        $this->container['pass_through_headers'] = $data['pass_through_headers'] ?? null;
        $this->container['postback'] = $data['postback'] ?? null;
        $this->container['postback_password'] = $data['postback_password'] ?? null;
        $this->container['postback_policy'] = $data['postback_policy'] ?? null;
        $this->container['postback_username'] = $data['postback_username'] ?? null;
        $this->container['redirect_delay'] = $data['redirect_delay'] ?? null;
        $this->container['redirect_failure'] = $data['redirect_failure'] ?? null;
        $this->container['redirect_success'] = $data['redirect_success'] ?? null;
        $this->container['renderer'] = $data['renderer'] ?? null;
        $this->container['return_params'] = $data['return_params'] ?? null;
        $this->container['ui'] = $data['ui'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acs_mode
     *
     * @return string|null
     */
    public function getAcsMode()
    {
        return $this->container['acs_mode'];
    }

    /**
     * Sets acs_mode
     *
     * @param string|null $acs_mode Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience.
     *
     * @return self
     */
    public function setAcsMode($acs_mode)
    {
        $this->container['acs_mode'] = $acs_mode;

        return $this;
    }

    /**
     * Gets custom_params
     *
     * @return \CityPay\Model\PaylinkCustomParam[]|null
     */
    public function getCustomParams()
    {
        return $this->container['custom_params'];
    }

    /**
     * Sets custom_params
     *
     * @param \CityPay\Model\PaylinkCustomParam[]|null $custom_params custom_params
     *
     * @return self
     */
    public function setCustomParams($custom_params)
    {
        $this->container['custom_params'] = $custom_params;

        return $this;
    }

    /**
     * Gets descriptor
     *
     * @return string|null
     */
    public function getDescriptor()
    {
        return $this->container['descriptor'];
    }

    /**
     * Sets descriptor
     *
     * @param string|null $descriptor Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.
     *
     * @return self
     */
    public function setDescriptor($descriptor)
    {
        $this->container['descriptor'] = $descriptor;

        return $this;
    }

    /**
     * Gets expire_in
     *
     * @return string|null
     */
    public function getExpireIn()
    {
        return $this->container['expire_in'];
    }

    /**
     * Sets expire_in
     *
     * @param string|null $expire_in Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes.
     *
     * @return self
     */
    public function setExpireIn($expire_in)
    {
        $this->container['expire_in'] = $expire_in;

        return $this;
    }

    /**
     * Gets field_guard
     *
     * @return \CityPay\Model\PaylinkFieldGuardModel[]|null
     */
    public function getFieldGuard()
    {
        return $this->container['field_guard'];
    }

    /**
     * Sets field_guard
     *
     * @param \CityPay\Model\PaylinkFieldGuardModel[]|null $field_guard field_guard
     *
     * @return self
     */
    public function setFieldGuard($field_guard)
    {
        $this->container['field_guard'] = $field_guard;

        return $this;
    }

    /**
     * Gets lock_params
     *
     * @return string[]|null
     */
    public function getLockParams()
    {
        return $this->container['lock_params'];
    }

    /**
     * Sets lock_params
     *
     * @param string[]|null $lock_params lock_params
     *
     * @return self
     */
    public function setLockParams($lock_params)
    {
        $this->container['lock_params'] = $lock_params;

        return $this;
    }

    /**
     * Gets merch_logo
     *
     * @return string|null
     */
    public function getMerchLogo()
    {
        return $this->container['merch_logo'];
    }

    /**
     * Sets merch_logo
     *
     * @param string|null $merch_logo A URL of a logo to include in the form. The URL should be delivered using HTTPS.
     *
     * @return self
     */
    public function setMerchLogo($merch_logo)
    {
        $this->container['merch_logo'] = $merch_logo;

        return $this;
    }

    /**
     * Gets merch_terms
     *
     * @return string|null
     */
    public function getMerchTerms()
    {
        return $this->container['merch_terms'];
    }

    /**
     * Sets merch_terms
     *
     * @param string|null $merch_terms A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.
     *
     * @return self
     */
    public function setMerchTerms($merch_terms)
    {
        $this->container['merch_terms'] = $merch_terms;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets part_payments
     *
     * @return \CityPay\Model\PaylinkPartPayments|null
     */
    public function getPartPayments()
    {
        return $this->container['part_payments'];
    }

    /**
     * Sets part_payments
     *
     * @param \CityPay\Model\PaylinkPartPayments|null $part_payments part_payments
     *
     * @return self
     */
    public function setPartPayments($part_payments)
    {
        $this->container['part_payments'] = $part_payments;

        return $this;
    }

    /**
     * Gets pass_through_data
     *
     * @return array<string,string>|null
     */
    public function getPassThroughData()
    {
        return $this->container['pass_through_data'];
    }

    /**
     * Sets pass_through_data
     *
     * @param array<string,string>|null $pass_through_data pass_through_data
     *
     * @return self
     */
    public function setPassThroughData($pass_through_data)
    {
        $this->container['pass_through_data'] = $pass_through_data;

        return $this;
    }

    /**
     * Gets pass_through_headers
     *
     * @return array<string,string>|null
     */
    public function getPassThroughHeaders()
    {
        return $this->container['pass_through_headers'];
    }

    /**
     * Sets pass_through_headers
     *
     * @param array<string,string>|null $pass_through_headers pass_through_headers
     *
     * @return self
     */
    public function setPassThroughHeaders($pass_through_headers)
    {
        $this->container['pass_through_headers'] = $pass_through_headers;

        return $this;
    }

    /**
     * Gets postback
     *
     * @return string|null
     */
    public function getPostback()
    {
        return $this->container['postback'];
    }

    /**
     * Sets postback
     *
     * @param string|null $postback Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.
     *
     * @return self
     */
    public function setPostback($postback)
    {
        $this->container['postback'] = $postback;

        return $this;
    }

    /**
     * Gets postback_password
     *
     * @return string|null
     */
    public function getPostbackPassword()
    {
        return $this->container['postback_password'];
    }

    /**
     * Sets postback_password
     *
     * @param string|null $postback_password A password to be added to the postback for HTTP Basic Authentication.
     *
     * @return self
     */
    public function setPostbackPassword($postback_password)
    {
        $this->container['postback_password'] = $postback_password;

        return $this;
    }

    /**
     * Gets postback_policy
     *
     * @return string|null
     */
    public function getPostbackPolicy()
    {
        return $this->container['postback_policy'];
    }

    /**
     * Sets postback_policy
     *
     * @param string|null $postback_policy The policy setting for the postback see Postback Handling.
     *
     * @return self
     */
    public function setPostbackPolicy($postback_policy)
    {
        $this->container['postback_policy'] = $postback_policy;

        return $this;
    }

    /**
     * Gets postback_username
     *
     * @return string|null
     */
    public function getPostbackUsername()
    {
        return $this->container['postback_username'];
    }

    /**
     * Sets postback_username
     *
     * @param string|null $postback_username A username to be added to the postback for HTTP Basic Authentication.
     *
     * @return self
     */
    public function setPostbackUsername($postback_username)
    {
        $this->container['postback_username'] = $postback_username;

        return $this;
    }

    /**
     * Gets redirect_delay
     *
     * @return int|null
     */
    public function getRedirectDelay()
    {
        return $this->container['redirect_delay'];
    }

    /**
     * Sets redirect_delay
     *
     * @param int|null $redirect_delay A value which can delay the redirection in seconds. A value of 0 will redirect immediately.
     *
     * @return self
     */
    public function setRedirectDelay($redirect_delay)
    {
        $this->container['redirect_delay'] = $redirect_delay;

        return $this;
    }

    /**
     * Gets redirect_failure
     *
     * @return string|null
     */
    public function getRedirectFailure()
    {
        return $this->container['redirect_failure'];
    }

    /**
     * Sets redirect_failure
     *
     * @param string|null $redirect_failure A URL which the browser is redirected to on non-completion of a transaction.
     *
     * @return self
     */
    public function setRedirectFailure($redirect_failure)
    {
        $this->container['redirect_failure'] = $redirect_failure;

        return $this;
    }

    /**
     * Gets redirect_success
     *
     * @return string|null
     */
    public function getRedirectSuccess()
    {
        return $this->container['redirect_success'];
    }

    /**
     * Sets redirect_success
     *
     * @param string|null $redirect_success A URL which the browser is redirected to on authorisation of a transaction.
     *
     * @return self
     */
    public function setRedirectSuccess($redirect_success)
    {
        $this->container['redirect_success'] = $redirect_success;

        return $this;
    }

    /**
     * Gets renderer
     *
     * @return string|null
     */
    public function getRenderer()
    {
        return $this->container['renderer'];
    }

    /**
     * Sets renderer
     *
     * @param string|null $renderer The Paylink renderer engine to use.
     *
     * @return self
     */
    public function setRenderer($renderer)
    {
        $this->container['renderer'] = $renderer;

        return $this;
    }

    /**
     * Gets return_params
     *
     * @return bool|null
     */
    public function getReturnParams()
    {
        return $this->container['return_params'];
    }

    /**
     * Sets return_params
     *
     * @param bool|null $return_params If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.
     *
     * @return self
     */
    public function setReturnParams($return_params)
    {
        $this->container['return_params'] = $return_params;

        return $this;
    }

    /**
     * Gets ui
     *
     * @return \CityPay\Model\PaylinkUI|null
     */
    public function getUi()
    {
        return $this->container['ui'];
    }

    /**
     * Sets ui
     *
     * @param \CityPay\Model\PaylinkUI|null $ui ui
     *
     * @return self
     */
    public function setUi($ui)
    {
        $this->container['ui'] = $ui;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


