<?php
/**
 * AuthResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Model;

use \ArrayAccess;
use \CityPay\ObjectSerializer;

/**
 * AuthResponse Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AuthResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'int',
        'atrn' => 'string',
        'atsd' => 'string',
        'authcode' => 'string',
        'authen_result' => 'string',
        'authorised' => 'bool',
        'avs_result' => 'string',
        'bin_commercial' => 'bool',
        'bin_debit' => 'bool',
        'bin_description' => 'string',
        'cavv' => 'string',
        'context' => 'string',
        'csc_result' => 'string',
        'currency' => 'string',
        'datetime' => '\DateTime',
        'eci' => 'string',
        'identifier' => 'string',
        'live' => 'bool',
        'maskedpan' => 'string',
        'merchantid' => 'int',
        'result' => 'int',
        'result_code' => 'string',
        'result_message' => 'string',
        'scheme' => 'string',
        'sha256' => 'string',
        'trans_status' => 'string',
        'transno' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'int32',
        'atrn' => null,
        'atsd' => null,
        'authcode' => null,
        'authen_result' => null,
        'authorised' => null,
        'avs_result' => null,
        'bin_commercial' => null,
        'bin_debit' => null,
        'bin_description' => null,
        'cavv' => null,
        'context' => null,
        'csc_result' => null,
        'currency' => null,
        'datetime' => 'date-time',
        'eci' => null,
        'identifier' => null,
        'live' => null,
        'maskedpan' => null,
        'merchantid' => 'int32',
        'result' => 'int32',
        'result_code' => null,
        'result_message' => null,
        'scheme' => null,
        'sha256' => null,
        'trans_status' => null,
        'transno' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'atrn' => 'atrn',
        'atsd' => 'atsd',
        'authcode' => 'authcode',
        'authen_result' => 'authen_result',
        'authorised' => 'authorised',
        'avs_result' => 'avs_result',
        'bin_commercial' => 'bin_commercial',
        'bin_debit' => 'bin_debit',
        'bin_description' => 'bin_description',
        'cavv' => 'cavv',
        'context' => 'context',
        'csc_result' => 'csc_result',
        'currency' => 'currency',
        'datetime' => 'datetime',
        'eci' => 'eci',
        'identifier' => 'identifier',
        'live' => 'live',
        'maskedpan' => 'maskedpan',
        'merchantid' => 'merchantid',
        'result' => 'result',
        'result_code' => 'result_code',
        'result_message' => 'result_message',
        'scheme' => 'scheme',
        'sha256' => 'sha256',
        'trans_status' => 'trans_status',
        'transno' => 'transno'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'atrn' => 'setAtrn',
        'atsd' => 'setAtsd',
        'authcode' => 'setAuthcode',
        'authen_result' => 'setAuthenResult',
        'authorised' => 'setAuthorised',
        'avs_result' => 'setAvsResult',
        'bin_commercial' => 'setBinCommercial',
        'bin_debit' => 'setBinDebit',
        'bin_description' => 'setBinDescription',
        'cavv' => 'setCavv',
        'context' => 'setContext',
        'csc_result' => 'setCscResult',
        'currency' => 'setCurrency',
        'datetime' => 'setDatetime',
        'eci' => 'setEci',
        'identifier' => 'setIdentifier',
        'live' => 'setLive',
        'maskedpan' => 'setMaskedpan',
        'merchantid' => 'setMerchantid',
        'result' => 'setResult',
        'result_code' => 'setResultCode',
        'result_message' => 'setResultMessage',
        'scheme' => 'setScheme',
        'sha256' => 'setSha256',
        'trans_status' => 'setTransStatus',
        'transno' => 'setTransno'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'atrn' => 'getAtrn',
        'atsd' => 'getAtsd',
        'authcode' => 'getAuthcode',
        'authen_result' => 'getAuthenResult',
        'authorised' => 'getAuthorised',
        'avs_result' => 'getAvsResult',
        'bin_commercial' => 'getBinCommercial',
        'bin_debit' => 'getBinDebit',
        'bin_description' => 'getBinDescription',
        'cavv' => 'getCavv',
        'context' => 'getContext',
        'csc_result' => 'getCscResult',
        'currency' => 'getCurrency',
        'datetime' => 'getDatetime',
        'eci' => 'getEci',
        'identifier' => 'getIdentifier',
        'live' => 'getLive',
        'maskedpan' => 'getMaskedpan',
        'merchantid' => 'getMerchantid',
        'result' => 'getResult',
        'result_code' => 'getResultCode',
        'result_message' => 'getResultMessage',
        'scheme' => 'getScheme',
        'sha256' => 'getSha256',
        'trans_status' => 'getTransStatus',
        'transno' => 'getTransno'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['atrn'] = $data['atrn'] ?? null;
        $this->container['atsd'] = $data['atsd'] ?? null;
        $this->container['authcode'] = $data['authcode'] ?? null;
        $this->container['authen_result'] = $data['authen_result'] ?? null;
        $this->container['authorised'] = $data['authorised'] ?? null;
        $this->container['avs_result'] = $data['avs_result'] ?? null;
        $this->container['bin_commercial'] = $data['bin_commercial'] ?? null;
        $this->container['bin_debit'] = $data['bin_debit'] ?? null;
        $this->container['bin_description'] = $data['bin_description'] ?? null;
        $this->container['cavv'] = $data['cavv'] ?? null;
        $this->container['context'] = $data['context'] ?? null;
        $this->container['csc_result'] = $data['csc_result'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['datetime'] = $data['datetime'] ?? null;
        $this->container['eci'] = $data['eci'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['live'] = $data['live'] ?? null;
        $this->container['maskedpan'] = $data['maskedpan'] ?? null;
        $this->container['merchantid'] = $data['merchantid'] ?? null;
        $this->container['result'] = $data['result'] ?? null;
        $this->container['result_code'] = $data['result_code'] ?? null;
        $this->container['result_message'] = $data['result_message'] ?? null;
        $this->container['scheme'] = $data['scheme'] ?? null;
        $this->container['sha256'] = $data['sha256'] ?? null;
        $this->container['trans_status'] = $data['trans_status'] ?? null;
        $this->container['transno'] = $data['transno'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantid'] === null) {
            $invalidProperties[] = "'merchantid' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        if ($this->container['result_code'] === null) {
            $invalidProperties[] = "'result_code' can't be null";
        }
        if ($this->container['result_message'] === null) {
            $invalidProperties[] = "'result_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount of the transaction processed.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets atrn
     *
     * @return string|null
     */
    public function getAtrn()
    {
        return $this->container['atrn'];
    }

    /**
     * Sets atrn
     *
     * @param string|null $atrn A reference number provided by the acquirer for a transaction it can be used to cross reference transactions with an Acquirers reporting panel.
     *
     * @return self
     */
    public function setAtrn($atrn)
    {
        $this->container['atrn'] = $atrn;

        return $this;
    }

    /**
     * Gets atsd
     *
     * @return string|null
     */
    public function getAtsd()
    {
        return $this->container['atsd'];
    }

    /**
     * Sets atsd
     *
     * @param string|null $atsd Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.
     *
     * @return self
     */
    public function setAtsd($atsd)
    {
        $this->container['atsd'] = $atsd;

        return $this;
    }

    /**
     * Gets authcode
     *
     * @return string|null
     */
    public function getAuthcode()
    {
        return $this->container['authcode'];
    }

    /**
     * Sets authcode
     *
     * @param string|null $authcode The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully   been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it   should not be used to determine whether a transaction was successfully processed. For instance an auth code   may be returned when a transaction has been subsequently declined due to a CSC mismatch.
     *
     * @return self
     */
    public function setAuthcode($authcode)
    {
        $this->container['authcode'] = $authcode;

        return $this;
    }

    /**
     * Gets authen_result
     *
     * @return string|null
     */
    public function getAuthenResult()
    {
        return $this->container['authen_result'];
    }

    /**
     * Sets authen_result
     *
     * @param string|null $authen_result The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:  <table> <tr> <th>Value</th> <th>Description</th> </tr> <tr> <td>Y</td> <td>Authentication Successful. The Cardholder's password was successfully validated.</td> </tr> <tr> <td>N</td> <td>Authentication Failed. Customer failed or cancelled authentication, transaction denied.</td> </tr> <tr> <td>A</td> <td>Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.</td> </tr> <tr> <td>U</td> <td>Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.</td> </tr> </table>
     *
     * @return self
     */
    public function setAuthenResult($authen_result)
    {
        $this->container['authen_result'] = $authen_result;

        return $this;
    }

    /**
     * Gets authorised
     *
     * @return bool|null
     */
    public function getAuthorised()
    {
        return $this->container['authorised'];
    }

    /**
     * Sets authorised
     *
     * @param bool|null $authorised A boolean definition that indicates that the transaction was authorised. It will return false if the transaction  was declined, rejected or cancelled due to CSC matching failures.  Attention should be referenced to the AuthResult and Response code for accurate determination of the result.
     *
     * @return self
     */
    public function setAuthorised($authorised)
    {
        $this->container['authorised'] = $authorised;

        return $this;
    }

    /**
     * Gets avs_result
     *
     * @return string|null
     */
    public function getAvsResult()
    {
        return $this->container['avs_result'];
    }

    /**
     * Sets avs_result
     *
     * @param string|null $avs_result The AVS result codes determine the result of checking the AVS values within the Address Verification fraud system. If a transaction is declined due to the AVS code not matching, this value can help determine the reason for the decline.  <table> <tr> <th>Code</th> <th>Description</th> </tr> <tr><td>Y</td><td>Address and 5 digit post code match</td></tr> <tr><td>M</td><td>Street address and Postal codes match for international transaction</td></tr> <tr><td>U</td><td>No AVS data available from issuer auth system</td></tr> <tr><td>A</td><td>Addres matches, post code does not</td></tr> <tr><td>I</td><td>Address information verified for international transaction</td></tr> <tr><td>Z</td><td>5 digit post code matches, Address does not</td></tr> <tr><td>W</td><td>9 digit post code matches, Address does not</td></tr> <tr><td>X</td><td>Postcode and address match</td></tr> <tr><td>B</td><td>Postal code not verified due to incompatible formats</td></tr> <tr><td>P</td><td>Postal codes match. Street address not verified due to to incompatible formats</td></tr> <tr><td>E</td><td>AVS Error</td></tr> <tr><td>C</td><td>Street address and Postal code not verified due to incompatible formats</td></tr> <tr><td>D</td><td>Street address and postal codes match</td></tr> <tr><td> </td><td>No information</td></tr> <tr><td>N</td><td>Neither postcode nor address match</td></tr> <tr><td>R</td><td>Retry, System unavailble or Timed Out</td></tr> <tr><td>S</td><td>AVS Service not supported by issuer or processor</td></tr> <tr><td>G</td><td>Issuer does not participate in AVS</td></tr> </table>
     *
     * @return self
     */
    public function setAvsResult($avs_result)
    {
        $this->container['avs_result'] = $avs_result;

        return $this;
    }

    /**
     * Gets bin_commercial
     *
     * @return bool|null
     */
    public function getBinCommercial()
    {
        return $this->container['bin_commercial'];
    }

    /**
     * Sets bin_commercial
     *
     * @param bool|null $bin_commercial Determines whether the bin range was found to be a commercial or business card.
     *
     * @return self
     */
    public function setBinCommercial($bin_commercial)
    {
        $this->container['bin_commercial'] = $bin_commercial;

        return $this;
    }

    /**
     * Gets bin_debit
     *
     * @return bool|null
     */
    public function getBinDebit()
    {
        return $this->container['bin_debit'];
    }

    /**
     * Sets bin_debit
     *
     * @param bool|null $bin_debit Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.
     *
     * @return self
     */
    public function setBinDebit($bin_debit)
    {
        $this->container['bin_debit'] = $bin_debit;

        return $this;
    }

    /**
     * Gets bin_description
     *
     * @return string|null
     */
    public function getBinDescription()
    {
        return $this->container['bin_description'];
    }

    /**
     * Sets bin_description
     *
     * @param string|null $bin_description A description of the bin range found for the card.
     *
     * @return self
     */
    public function setBinDescription($bin_description)
    {
        $this->container['bin_description'] = $bin_description;

        return $this;
    }

    /**
     * Gets cavv
     *
     * @return string|null
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string|null $cavv The cardholder authentication verification value which can be returned for verification purposes of the authenticated  transaction for dispute realisation.
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context The context which processed the transaction, can be used for support purposes to trace transactions.
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets csc_result
     *
     * @return string|null
     */
    public function getCscResult()
    {
        return $this->container['csc_result'];
    }

    /**
     * Sets csc_result
     *
     * @param string|null $csc_result The CSC rseult codes determine the result of checking the provided CSC value within the Card Security Code fraud system. If a transaction is declined due to the CSC code not matching, this value can help determine the reason for the decline.  <table> <tr> <th>Code</th> <th>Description</th> </tr> <tr><td> </td><td>No information</td></tr> <tr><td>M</td><td>Card verification data matches</td></tr> <tr><td>N</td><td>Card verification data was checked but did not match</td></tr> <tr><td>P</td><td>Card verification was not processed</td></tr> <tr><td>S</td><td>The card verification data should be on the card but the merchant indicates that it is not</td></tr> <tr><td>U</td><td>The card issuer is not certified</td></tr> </table>
     *
     * @return self
     */
    public function setCscResult($csc_result)
    {
        $this->container['csc_result'] = $csc_result;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency the transaction was processed in. This is an `ISO4217` alpha currency value.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime|null
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime|null $datetime The UTC date time of the transaction in ISO data time format.
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string|null
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string|null $eci An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.
     *
     * @return self
     */
    public function setEci($eci)
    {
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier The identifier provided within the request.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets live
     *
     * @return bool|null
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param bool|null $live Used to identify that a transaction was processed on a live authorisation platform.
     *
     * @return self
     */
    public function setLive($live)
    {
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets maskedpan
     *
     * @return string|null
     */
    public function getMaskedpan()
    {
        return $this->container['maskedpan'];
    }

    /**
     * Sets maskedpan
     *
     * @param string|null $maskedpan A masked value of the card number used for processing displaying limited values that can be used on a receipt.
     *
     * @return self
     */
    public function setMaskedpan($maskedpan)
    {
        $this->container['maskedpan'] = $maskedpan;

        return $this;
    }

    /**
     * Gets merchantid
     *
     * @return int
     */
    public function getMerchantid()
    {
        return $this->container['merchantid'];
    }

    /**
     * Sets merchantid
     *
     * @param int $merchantid The merchant id that processed this transaction.
     *
     * @return self
     */
    public function setMerchantid($merchantid)
    {
        $this->container['merchantid'] = $merchantid;

        return $this;
    }

    /**
     * Gets result
     *
     * @return int
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param int $result An integer result that indicates the outcome of the transaction. The Code value below maps to the result value  <table> <tr> <th>Code</th> <th>Abbrev</th> <th>Description</th> </tr> <tr><td>0</td><td>Declined</td><td>Declined</td></tr> <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr> <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr> <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr> <tr><td>4</td><td>Referred</td><td>Referred</td></tr> <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr> <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr> <tr><td>7</td><td>Hold</td><td>Hold</td></tr> <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr> <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr> <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr> <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr> <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr> <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr> <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr> <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr> <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr> <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr> <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr> <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr> <tr><td>20</td><td>Un</td><td>Unknown</td></tr> <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr> <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr> <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr> </table>
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string $result_code The result code as defined in the Response Codes Reference for example 000 is an accepted live transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure.  Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.
     *
     * @return self
     */
    public function setResultCode($result_code)
    {
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets result_message
     *
     * @return string
     */
    public function getResultMessage()
    {
        return $this->container['result_message'];
    }

    /**
     * Sets result_message
     *
     * @param string $result_message The message regarding the result which provides further narrative to the result code.
     *
     * @return self
     */
    public function setResultMessage($result_message)
    {
        $this->container['result_message'] = $result_message;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string|null $scheme A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 A SHA256 digest value of the transaction used to validate the response data The digest is calculated by concatenating   * authcode   * amount   * response_code   * merchant_id   * trans_no   * identifier   * licence_key - which is not provided in the response.
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets trans_status
     *
     * @return string|null
     */
    public function getTransStatus()
    {
        return $this->container['trans_status'];
    }

    /**
     * Sets trans_status
     *
     * @param string|null $trans_status Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.  <table> <tr> <th>Id</th> <th>Description</th> </tr> <tr> <td>O</td> <td>Transaction is open for settlement</td> </tr> <tr> <td>A</td> <td>Transaction is assigned for settlement and can no longer be voided</td> </tr> <tr> <td>S</td> <td>Transaction has been settled</td> </tr> <tr> <td>D</td> <td>Transaction has been declined</td> </tr> <tr> <td>R</td> <td>Transaction has been rejected</td> </tr> <tr> <td>P</td> <td>Transaction has been authorised only and awaiting a capture. Used in pre-auth situations</td> </tr> <tr> <td>C</td> <td>Transaction has been cancelled</td> </tr> <tr> <td>E</td> <td>Transaction has expired</td> </tr> <tr> <td>I</td> <td>Transaction has been initialised but no action was able to be carried out</td> </tr> <tr> <td>H</td> <td>Transaction is awaiting authorisation</td> </tr> <tr> <td>.</td> <td>Transaction is on hold</td> </tr> <tr> <td>V</td> <td>Transaction has been verified</td> </tr> </table>
     *
     * @return self
     */
    public function setTransStatus($trans_status)
    {
        $this->container['trans_status'] = $trans_status;

        return $this;
    }

    /**
     * Gets transno
     *
     * @return int|null
     */
    public function getTransno()
    {
        return $this->container['transno'];
    }

    /**
     * Sets transno
     *
     * @param int|null $transno The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued.
     *
     * @return self
     */
    public function setTransno($transno)
    {
        $this->container['transno'] = $transno;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


