<?php
/**
 * AuthRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CityPay Payment API
 *
 * This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CityPay\Model;

use \ArrayAccess;
use \CityPay\ObjectSerializer;

/**
 * AuthRequest Class Doc Comment
 *
 * @category Class
 * @package  CityPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AuthRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'airline_data' => '\CityPay\Model\AirlineAdvice',
        'amount' => 'int',
        'avs_postcode_policy' => 'string',
        'bill_to' => '\CityPay\Model\ContactDetails',
        'cardnumber' => 'string',
        'csc' => 'string',
        'csc_policy' => 'string',
        'currency' => 'string',
        'duplicate_policy' => 'string',
        'expmonth' => 'int',
        'expyear' => 'int',
        'external_mpi' => '\CityPay\Model\ExternalMPI',
        'identifier' => 'string',
        'match_avsa' => 'string',
        'mcc6012' => '\CityPay\Model\MCC6012',
        'merchantid' => 'int',
        'name_on_card' => 'string',
        'ship_to' => '\CityPay\Model\ContactDetails',
        'threedsecure' => '\CityPay\Model\ThreeDSecure',
        'trans_info' => 'string',
        'trans_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'airline_data' => null,
        'amount' => 'int32',
        'avs_postcode_policy' => null,
        'bill_to' => null,
        'cardnumber' => null,
        'csc' => null,
        'csc_policy' => null,
        'currency' => null,
        'duplicate_policy' => null,
        'expmonth' => 'int32',
        'expyear' => 'int32',
        'external_mpi' => null,
        'identifier' => null,
        'match_avsa' => null,
        'mcc6012' => null,
        'merchantid' => 'int32',
        'name_on_card' => null,
        'ship_to' => null,
        'threedsecure' => null,
        'trans_info' => null,
        'trans_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airline_data' => 'airline_data',
        'amount' => 'amount',
        'avs_postcode_policy' => 'avs_postcode_policy',
        'bill_to' => 'bill_to',
        'cardnumber' => 'cardnumber',
        'csc' => 'csc',
        'csc_policy' => 'csc_policy',
        'currency' => 'currency',
        'duplicate_policy' => 'duplicate_policy',
        'expmonth' => 'expmonth',
        'expyear' => 'expyear',
        'external_mpi' => 'external_mpi',
        'identifier' => 'identifier',
        'match_avsa' => 'match_avsa',
        'mcc6012' => 'mcc6012',
        'merchantid' => 'merchantid',
        'name_on_card' => 'name_on_card',
        'ship_to' => 'ship_to',
        'threedsecure' => 'threedsecure',
        'trans_info' => 'trans_info',
        'trans_type' => 'trans_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airline_data' => 'setAirlineData',
        'amount' => 'setAmount',
        'avs_postcode_policy' => 'setAvsPostcodePolicy',
        'bill_to' => 'setBillTo',
        'cardnumber' => 'setCardnumber',
        'csc' => 'setCsc',
        'csc_policy' => 'setCscPolicy',
        'currency' => 'setCurrency',
        'duplicate_policy' => 'setDuplicatePolicy',
        'expmonth' => 'setExpmonth',
        'expyear' => 'setExpyear',
        'external_mpi' => 'setExternalMpi',
        'identifier' => 'setIdentifier',
        'match_avsa' => 'setMatchAvsa',
        'mcc6012' => 'setMcc6012',
        'merchantid' => 'setMerchantid',
        'name_on_card' => 'setNameOnCard',
        'ship_to' => 'setShipTo',
        'threedsecure' => 'setThreedsecure',
        'trans_info' => 'setTransInfo',
        'trans_type' => 'setTransType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airline_data' => 'getAirlineData',
        'amount' => 'getAmount',
        'avs_postcode_policy' => 'getAvsPostcodePolicy',
        'bill_to' => 'getBillTo',
        'cardnumber' => 'getCardnumber',
        'csc' => 'getCsc',
        'csc_policy' => 'getCscPolicy',
        'currency' => 'getCurrency',
        'duplicate_policy' => 'getDuplicatePolicy',
        'expmonth' => 'getExpmonth',
        'expyear' => 'getExpyear',
        'external_mpi' => 'getExternalMpi',
        'identifier' => 'getIdentifier',
        'match_avsa' => 'getMatchAvsa',
        'mcc6012' => 'getMcc6012',
        'merchantid' => 'getMerchantid',
        'name_on_card' => 'getNameOnCard',
        'ship_to' => 'getShipTo',
        'threedsecure' => 'getThreedsecure',
        'trans_info' => 'getTransInfo',
        'trans_type' => 'getTransType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['airline_data'] = $data['airline_data'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['avs_postcode_policy'] = $data['avs_postcode_policy'] ?? null;
        $this->container['bill_to'] = $data['bill_to'] ?? null;
        $this->container['cardnumber'] = $data['cardnumber'] ?? null;
        $this->container['csc'] = $data['csc'] ?? null;
        $this->container['csc_policy'] = $data['csc_policy'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['duplicate_policy'] = $data['duplicate_policy'] ?? null;
        $this->container['expmonth'] = $data['expmonth'] ?? null;
        $this->container['expyear'] = $data['expyear'] ?? null;
        $this->container['external_mpi'] = $data['external_mpi'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['match_avsa'] = $data['match_avsa'] ?? null;
        $this->container['mcc6012'] = $data['mcc6012'] ?? null;
        $this->container['merchantid'] = $data['merchantid'] ?? null;
        $this->container['name_on_card'] = $data['name_on_card'] ?? null;
        $this->container['ship_to'] = $data['ship_to'] ?? null;
        $this->container['threedsecure'] = $data['threedsecure'] ?? null;
        $this->container['trans_info'] = $data['trans_info'] ?? null;
        $this->container['trans_type'] = $data['trans_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['cardnumber'] === null) {
            $invalidProperties[] = "'cardnumber' can't be null";
        }
        if ((mb_strlen($this->container['cardnumber']) > 22)) {
            $invalidProperties[] = "invalid value for 'cardnumber', the character length must be smaller than or equal to 22.";
        }

        if ((mb_strlen($this->container['cardnumber']) < 12)) {
            $invalidProperties[] = "invalid value for 'cardnumber', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['csc']) && (mb_strlen($this->container['csc']) > 4)) {
            $invalidProperties[] = "invalid value for 'csc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['csc']) && (mb_strlen($this->container['csc']) < 3)) {
            $invalidProperties[] = "invalid value for 'csc', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['expmonth'] === null) {
            $invalidProperties[] = "'expmonth' can't be null";
        }
        if (($this->container['expmonth'] > 12)) {
            $invalidProperties[] = "invalid value for 'expmonth', must be smaller than or equal to 12.";
        }

        if (($this->container['expmonth'] < 1)) {
            $invalidProperties[] = "invalid value for 'expmonth', must be bigger than or equal to 1.";
        }

        if ($this->container['expyear'] === null) {
            $invalidProperties[] = "'expyear' can't be null";
        }
        if (($this->container['expyear'] > 2100)) {
            $invalidProperties[] = "invalid value for 'expyear', must be smaller than or equal to 2100.";
        }

        if (($this->container['expyear'] < 2000)) {
            $invalidProperties[] = "invalid value for 'expyear', must be bigger than or equal to 2000.";
        }

        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        if ((mb_strlen($this->container['identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['identifier']) < 4)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['merchantid'] === null) {
            $invalidProperties[] = "'merchantid' can't be null";
        }
        if (!is_null($this->container['name_on_card']) && (mb_strlen($this->container['name_on_card']) > 45)) {
            $invalidProperties[] = "invalid value for 'name_on_card', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['name_on_card']) && (mb_strlen($this->container['name_on_card']) < 2)) {
            $invalidProperties[] = "invalid value for 'name_on_card', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['trans_info']) && (mb_strlen($this->container['trans_info']) > 50)) {
            $invalidProperties[] = "invalid value for 'trans_info', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['trans_type']) && (mb_strlen($this->container['trans_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'trans_type', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airline_data
     *
     * @return \CityPay\Model\AirlineAdvice|null
     */
    public function getAirlineData()
    {
        return $this->container['airline_data'];
    }

    /**
     * Sets airline_data
     *
     * @param \CityPay\Model\AirlineAdvice|null $airline_data airline_data
     *
     * @return self
     */
    public function setAirlineData($airline_data)
    {
        $this->container['airline_data'] = $airline_data;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP £1,021.95 the amount value is 102195.
     *
     * @return self
     */
    public function setAmount($amount)
    {


        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets avs_postcode_policy
     *
     * @return string|null
     */
    public function getAvsPostcodePolicy()
    {
        return $this->container['avs_postcode_policy'];
    }

    /**
     * Sets avs_postcode_policy
     *
     * @param string|null $avs_postcode_policy A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
     *
     * @return self
     */
    public function setAvsPostcodePolicy($avs_postcode_policy)
    {
        $this->container['avs_postcode_policy'] = $avs_postcode_policy;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \CityPay\Model\ContactDetails|null
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \CityPay\Model\ContactDetails|null $bill_to bill_to
     *
     * @return self
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets cardnumber
     *
     * @return string
     */
    public function getCardnumber()
    {
        return $this->container['cardnumber'];
    }

    /**
     * Sets cardnumber
     *
     * @param string $cardnumber The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored.
     *
     * @return self
     */
    public function setCardnumber($cardnumber)
    {
        if ((mb_strlen($cardnumber) > 22)) {
            throw new \InvalidArgumentException('invalid length for $cardnumber when calling AuthRequest., must be smaller than or equal to 22.');
        }
        if ((mb_strlen($cardnumber) < 12)) {
            throw new \InvalidArgumentException('invalid length for $cardnumber when calling AuthRequest., must be bigger than or equal to 12.');
        }

        $this->container['cardnumber'] = $cardnumber;

        return $this;
    }

    /**
     * Gets csc
     *
     * @return string|null
     */
    public function getCsc()
    {
        return $this->container['csc'];
    }

    /**
     * Sets csc
     *
     * @param string|null $csc The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
     *
     * @return self
     */
    public function setCsc($csc)
    {
        if (!is_null($csc) && (mb_strlen($csc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $csc when calling AuthRequest., must be smaller than or equal to 4.');
        }
        if (!is_null($csc) && (mb_strlen($csc) < 3)) {
            throw new \InvalidArgumentException('invalid length for $csc when calling AuthRequest., must be bigger than or equal to 3.');
        }

        $this->container['csc'] = $csc;

        return $this;
    }

    /**
     * Gets csc_policy
     *
     * @return string|null
     */
    public function getCscPolicy()
    {
        return $this->container['csc_policy'];
    }

    /**
     * Sets csc_policy
     *
     * @param string|null $csc_policy A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
     *
     * @return self
     */
    public function setCscPolicy($csc_policy)
    {
        $this->container['csc_policy'] = $csc_policy;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The processing currency for the transaction. Will default to the merchant account currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling AuthRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($currency) && (mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling AuthRequest., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets duplicate_policy
     *
     * @return string|null
     */
    public function getDuplicatePolicy()
    {
        return $this->container['duplicate_policy'];
    }

    /**
     * Sets duplicate_policy
     *
     * @param string|null $duplicate_policy A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   `3` to ignore. Transactions that are ignored will have the same affect as bypass.
     *
     * @return self
     */
    public function setDuplicatePolicy($duplicate_policy)
    {
        $this->container['duplicate_policy'] = $duplicate_policy;

        return $this;
    }

    /**
     * Gets expmonth
     *
     * @return int
     */
    public function getExpmonth()
    {
        return $this->container['expmonth'];
    }

    /**
     * Sets expmonth
     *
     * @param int $expmonth The month of expiry of the card. The month value should be a numerical value between 1 and 12.
     *
     * @return self
     */
    public function setExpmonth($expmonth)
    {

        if (($expmonth > 12)) {
            throw new \InvalidArgumentException('invalid value for $expmonth when calling AuthRequest., must be smaller than or equal to 12.');
        }
        if (($expmonth < 1)) {
            throw new \InvalidArgumentException('invalid value for $expmonth when calling AuthRequest., must be bigger than or equal to 1.');
        }

        $this->container['expmonth'] = $expmonth;

        return $this;
    }

    /**
     * Gets expyear
     *
     * @return int
     */
    public function getExpyear()
    {
        return $this->container['expyear'];
    }

    /**
     * Sets expyear
     *
     * @param int $expyear The year of expiry of the card.
     *
     * @return self
     */
    public function setExpyear($expyear)
    {

        if (($expyear > 2100)) {
            throw new \InvalidArgumentException('invalid value for $expyear when calling AuthRequest., must be smaller than or equal to 2100.');
        }
        if (($expyear < 2000)) {
            throw new \InvalidArgumentException('invalid value for $expyear when calling AuthRequest., must be bigger than or equal to 2000.');
        }

        $this->container['expyear'] = $expyear;

        return $this;
    }

    /**
     * Gets external_mpi
     *
     * @return \CityPay\Model\ExternalMPI|null
     */
    public function getExternalMpi()
    {
        return $this->container['external_mpi'];
    }

    /**
     * Sets external_mpi
     *
     * @param \CityPay\Model\ExternalMPI|null $external_mpi external_mpi
     *
     * @return self
     */
    public function setExternalMpi($external_mpi)
    {
        $this->container['external_mpi'] = $external_mpi;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if ((mb_strlen($identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling AuthRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($identifier) < 4)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling AuthRequest., must be bigger than or equal to 4.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets match_avsa
     *
     * @return string|null
     */
    public function getMatchAvsa()
    {
        return $this->container['match_avsa'];
    }

    /**
     * Sets match_avsa
     *
     * @param string|null $match_avsa A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
     *
     * @return self
     */
    public function setMatchAvsa($match_avsa)
    {
        $this->container['match_avsa'] = $match_avsa;

        return $this;
    }

    /**
     * Gets mcc6012
     *
     * @return \CityPay\Model\MCC6012|null
     */
    public function getMcc6012()
    {
        return $this->container['mcc6012'];
    }

    /**
     * Sets mcc6012
     *
     * @param \CityPay\Model\MCC6012|null $mcc6012 mcc6012
     *
     * @return self
     */
    public function setMcc6012($mcc6012)
    {
        $this->container['mcc6012'] = $mcc6012;

        return $this;
    }

    /**
     * Gets merchantid
     *
     * @return int
     */
    public function getMerchantid()
    {
        return $this->container['merchantid'];
    }

    /**
     * Sets merchantid
     *
     * @param int $merchantid Identifies the merchant account to perform processing for.
     *
     * @return self
     */
    public function setMerchantid($merchantid)
    {
        $this->container['merchantid'] = $merchantid;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        if (!is_null($name_on_card) && (mb_strlen($name_on_card) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name_on_card when calling AuthRequest., must be smaller than or equal to 45.');
        }
        if (!is_null($name_on_card) && (mb_strlen($name_on_card) < 2)) {
            throw new \InvalidArgumentException('invalid length for $name_on_card when calling AuthRequest., must be bigger than or equal to 2.');
        }

        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \CityPay\Model\ContactDetails|null
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \CityPay\Model\ContactDetails|null $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets threedsecure
     *
     * @return \CityPay\Model\ThreeDSecure|null
     */
    public function getThreedsecure()
    {
        return $this->container['threedsecure'];
    }

    /**
     * Sets threedsecure
     *
     * @param \CityPay\Model\ThreeDSecure|null $threedsecure threedsecure
     *
     * @return self
     */
    public function setThreedsecure($threedsecure)
    {
        $this->container['threedsecure'] = $threedsecure;

        return $this;
    }

    /**
     * Gets trans_info
     *
     * @return string|null
     */
    public function getTransInfo()
    {
        return $this->container['trans_info'];
    }

    /**
     * Sets trans_info
     *
     * @param string|null $trans_info Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
     *
     * @return self
     */
    public function setTransInfo($trans_info)
    {
        if (!is_null($trans_info) && (mb_strlen($trans_info) > 50)) {
            throw new \InvalidArgumentException('invalid length for $trans_info when calling AuthRequest., must be smaller than or equal to 50.');
        }

        $this->container['trans_info'] = $trans_info;

        return $this;
    }

    /**
     * Gets trans_type
     *
     * @return string|null
     */
    public function getTransType()
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     *
     * @param string|null $trans_type The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
     *
     * @return self
     */
    public function setTransType($trans_type)
    {
        if (!is_null($trans_type) && (mb_strlen($trans_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $trans_type when calling AuthRequest., must be smaller than or equal to 1.');
        }

        $this->container['trans_type'] = $trans_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


